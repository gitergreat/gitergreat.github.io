<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Greatness</title>
  
  <subtitle>记录自己的学习过程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-30T01:14:50.937Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.W</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python基本数据类型（三）</title>
    <link href="http://yoursite.com/2018/09/24/Python-3-3/"/>
    <id>http://yoursite.com/2018/09/24/Python-3-3/</id>
    <published>2018-09-24T15:18:52.000Z</published>
    <updated>2018-09-30T01:14:50.937Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>第三节是字符串类型及操作，加快进度了。<br>…</em></p></blockquote><a id="more"></a><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><hr><pre><code>字符串：由0个或多个字符组成的有序字符序列。</code></pre><p>-字符串由一对单引号或一对双引号表示<br> 例：”请输入带有符号的温度值：” 或者 ‘C’<br>-字符串是带有字符的有序序列，可以对其中的字符进行索引<br> 例：’请’是上面字符串的第0个字符</p><h2 id="字符串的两类共四种表示方法"><a href="#字符串的两类共四种表示方法" class="headerlink" title="字符串的两类共四种表示方法"></a>字符串的两类共四种表示方法</h2><p>1.由一对单引号或双引号表示，仅表示单行字符串<br>  例：”请输入带有符号的温度值：” 或者 ‘C’<br>2.由一对三单引号或三双引号表示，可表示多行字符串<br>  例：’’’Python<br>                         语言’’’</p><p>注：三单引号形成字符串，注释是其使用方法之一<br>    字符串中使用单引号，外面就用双引号<br>    字符串中使用双引号，外面就用单引号<br>    字符串中既有单引号又有双引号，外面就用三单引号</p><h2 id="字符串的序号"><a href="#字符串的序号" class="headerlink" title="字符串的序号"></a>字符串的序号</h2><ul><li>正向递增序号</li><li>反向递减序号</li></ul><h1 id="字符串的操作"><a href="#字符串的操作" class="headerlink" title="字符串的操作"></a>字符串的操作</h1><hr><h2 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h2><ul><li>索引：返回字符串中的单个字符  ———— &lt;字符串&gt;[M]</li><li>切片：返回字符串中的一段字符子串  ———— &lt;字符串&gt;[M:N]<pre><code>字符串切片的高级用法：  * 使用[M:N:K]根据步长对字符串切片  * &lt;字符串&gt;[M:N],M缺失表示至开头，N缺失表示至结尾  * &lt;字符串&gt;[M:N:K],根据步长K对字符串切片特殊用法[::-1]将字符串逆序</code></pre></li></ul><h2 id="字符串的特殊字符"><a href="#字符串的特殊字符" class="headerlink" title="字符串的特殊字符"></a>字符串的特殊字符</h2><pre><code>转义符 \</code></pre><ul><li>转义符表示特殊字符的本意<br>例：\”    表示字符串中的出现“</li><li>转义符形成一些组合，表示一些不可打印的含义<br>例：”\b”回退，”\n”换行（光标移动到下行首）”\r”回车（光标移动到本行首）</li></ul><h2 id="字符串的操作符"><a href="#字符串的操作符" class="headerlink" title="字符串的操作符"></a>字符串的操作符</h2><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">x + y</td><td style="text-align:left">连接两个字符串x和y</td></tr><tr><td style="text-align:center">n * x 或 x * n</td><td style="text-align:left">复制n次字符串x</td></tr><tr><td style="text-align:center">x in s</td><td style="text-align:left">如果x是s的字串，返回True,否则返回False</td></tr></tbody></table><p> 例：获取星期字符串<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. #WeekNamePrintV1.py</span><br><span class="line">    weekStr = &quot;星期一星期二星期三星期四星期五星期六星期日&quot;</span><br><span class="line">    weekId  = eval(input(&quot;请输入星期数字（1-7）:&quot;))</span><br><span class="line">    pos = (weekId - 1) * 3</span><br><span class="line">    print(weekStr[pos:pos+3])</span><br></pre></td></tr></table></figure></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2. #WeekNamePrintV2.py</span><br><span class="line">    weekStr = &quot;一二三四五六日&quot;</span><br><span class="line">    weekId = eval(input(&quot;请输入星期数字（1-7）:&quot;))</span><br><span class="line">    print(&quot;星期&quot; + weekStr[weekId-1] )</span><br></pre></td></tr></table></figure><h2 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h2><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">len(x)</td><td style="text-align:left">长度，返回字符串x的长度</td></tr><tr><td style="text-align:center">str(x)</td><td style="text-align:left">任何类型x所对应的字符串形式 例：str(1.23)结果为”1.23”，str([1,2])结果为”[1,2]”</td></tr><tr><td style="text-align:center">eval(x)</td><td style="text-align:left">与eval(x)做了相反的工作，是一对函数</td></tr><tr><td style="text-align:center">repr(x)</td><td style="text-align:left">返回一个对象的string格式</td></tr><tr><td style="text-align:center">hex(x)或eval()</td><td style="text-align:left">整数x的十六进制或八进制小写形式字符串</td></tr><tr><td style="text-align:center">chr(u)</td><td style="text-align:left">x为Unicode编码，返回其对应的字符</td></tr><tr><td style="text-align:center">ord(x)</td><td style="text-align:left">x为字符，返回其对应的Unicode编码</td></tr></tbody></table><p> <em>注：Unicode编码：Python字符串中的每个字符都是Unicode编码</em></p><h2 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="字符串处理方法"></a>字符串处理方法</h2><ul><li>”方法“特指&lt;a>.&lt;b>()风格中的函数&lt;b>()</li><li>方法本身也是函数，但与&lt;a>有关，&lt;a>.&lt;b>()风格使用</li><li><p>字符串及变量也是&lt;a>,存在一些方法</p><p><em>方法面向对象</em></p><p><strong>一些方法形式提供的字符串处理功能</strong></p></li></ul><table><thead><tr><th style="text-align:center">方法及使用</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">str.lower()或str.upper()</td><td style="text-align:left">返回字符串的副本，全部字符小写/大写</td></tr><tr><td style="text-align:center">str.split(sep=None)</td><td style="text-align:left">返回一个列表，由str根据sep被分隔的部分组成</td></tr><tr><td style="text-align:center">str.count(sub)</td><td style="text-align:left">返回字串sub在str中出现的次数</td></tr><tr><td style="text-align:center">str.replace(old,new)</td><td style="text-align:left">返回字符串str副本，所有old字串被替换为new</td></tr><tr><td style="text-align:center">str.center(width[,fillchar])</td><td style="text-align:left">字符串str根据宽度width居中，fillchar可选</td></tr><tr><td style="text-align:center">str.strip(chars)</td><td style="text-align:left">从str中去掉在其左侧和右侧chars中列出的字符</td></tr><tr><td style="text-align:center">str.join(iter)</td><td style="text-align:left">在iter变量出最后元素外的每个元素增加一个str</td></tr></tbody></table><h2 id="字符串类型的格式化"><a href="#字符串类型的格式化" class="headerlink" title="字符串类型的格式化"></a>字符串类型的格式化</h2><p> -格式化是对字符串进行格式表达的方式<br> -字符串格式化使用.format()方法，用法如下：<br> &lt;模板字符串&gt;.format()<br> 槽{ }</p><p> <strong>format()中参数的顺序和槽{}的顺序默认一一对应<br>   可以在槽中指定需要添加参数的位置</strong></p><h3 id="format-方法的格式控制"><a href="#format-方法的格式控制" class="headerlink" title="format()方法的格式控制"></a>format()方法的格式控制</h3><table><thead><tr><th>:</th><th>&lt;填充&gt;</th><th>&lt;对齐&gt;</th><th>&lt;宽度&gt;</th><th>&lt;,&gt;</th><th>&lt;.精度&gt;</th><th>&lt;类型&gt;</th></tr></thead><tbody><tr><td>引导符号</td><td>用于填充单个字符</td><td>&lt;左对齐  &gt;右对齐  ^居中对齐</td><td>槽设定的输出宽度</td><td>数字的千分位分隔符</td><td>浮点数小数精度或字符串最大输出长度</td><td>整数类型b,c,d,o,x,X（十六进制中字母大写）   浮点数类型e,E,f,%</td></tr></tbody></table><p>  例：</p><p> format()方法的格式控制<br>  <code>&quot;{0:=^20}&quot;.format(&quot;PYTHON&quot;)</code><br>  :  ————引导符<br>  =  ————填充符号 填充=<br>  ^  ————居中对齐<br>  20  ———宽度</p><p><em>省略填充对齐直接给出宽度<br>默认填充为空格<br>变量左对齐</em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;第三节是字符串类型及操作，加快进度了。&lt;br&gt;…&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基本数据类型（二）</title>
    <link href="http://yoursite.com/2018/09/24/Python-3-2/"/>
    <id>http://yoursite.com/2018/09/24/Python-3-2/</id>
    <published>2018-09-24T04:39:08.000Z</published>
    <updated>2018-09-24T05:03:41.584Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>今天是中秋节，继续整理一下笔记吧。最近任务比较多，博客就慢慢更吧。<br>第三章第二节来通过一个实例来展示数字类型的具体应用，同时也让我知道努力学习的重要性。</em></p></blockquote><a id="more"></a><h1 id="实例3：天天向上的力量"><a href="#实例3：天天向上的力量" class="headerlink" title="实例3：天天向上的力量"></a>实例3：天天向上的力量</h1><hr><h2 id="1-。的力量"><a href="#1-。的力量" class="headerlink" title="1%。的力量"></a>1%。的力量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#DayDayUpQ1.py</span><br><span class="line">dayup = pow(1.001,365)</span><br><span class="line">daydown = pow(0.999,365)</span><br><span class="line">print(&quot;向上：&#123;:.2f&#125;，向下：&#123;:.2f&#125;&quot;.format(dayup,daydown))</span><br></pre></td></tr></table></figure><p><em>结果：向上：1.44，向下：0.69</em></p><h2 id="5-。和1-的力量"><a href="#5-。和1-的力量" class="headerlink" title="5%。和1%的力量"></a>5%。和1%的力量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#DayDayUpQ2.py</span><br><span class="line">dayup = pow(1.001,365)</span><br><span class="line">dayfactor = 0.005</span><br><span class="line">dayup = pow(1+dayfactor,365)</span><br><span class="line">daydown = pow(1-dayfactor,365)</span><br><span class="line">print(&quot;向上：&#123;:.2f&#125;,向下：&#123;:.2f&#125;&quot;.format(dayup,daydown))</span><br></pre></td></tr></table></figure><p><em>5%。结果：向上：6.17，向下：0.16<br>1%结果：向上37.78，向下：0.03</em></p><h2 id="工作日努力，双休日休息"><a href="#工作日努力，双休日休息" class="headerlink" title="工作日努力，双休日休息"></a>工作日努力，双休日休息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#DayDayUpQ3.py</span><br><span class="line">dayup = 1.0</span><br><span class="line">dayfactor = 0.01</span><br><span class="line">for i in range(365):</span><br><span class="line">    if i % 7 in [6,0]:</span><br><span class="line">        dayup = dayup*(1-dayfactor)</span><br><span class="line">    else:</span><br><span class="line">        dayup = dayup*(1+dayfactor)</span><br><span class="line">print(&quot;工作日的力量：&#123;:.2f&#125;&quot;.format(dayup))</span><br></pre></td></tr></table></figure><p><em>结果：工作日的力量：4.63</em></p><h2 id="工作日的努力弥补"><a href="#工作日的努力弥补" class="headerlink" title="工作日的努力弥补"></a>工作日的努力弥补</h2><p>-工作日努力到什么水平才能与每天努力1%的结果相同呢？<br>（利用def和while）</p><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#DayDayUpQ4.py</span><br><span class="line">def dayUp(df):</span><br><span class="line">    dayup = 1</span><br><span class="line">    for i in range(365):</span><br><span class="line">        if i % 7 in [6,0]:</span><br><span class="line">            dayup = dayup*(1 - 0.01)</span><br><span class="line">        else:</span><br><span class="line">            dayup = dayup*(1 + df)</span><br><span class="line">    return dayup</span><br><span class="line">dayfactor = 0.01</span><br><span class="line">while dayUp(dayfactor) &lt; 37.78:</span><br><span class="line">      dayfactor += 0.001</span><br><span class="line">      print(&quot;工作日的努力参数是:&#123;:.3f&#125;&quot;.format(dayfactor))</span><br></pre></td></tr></table></figure><p><em>结果：工作日的努力参数是：0.019</em></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><ul><li>以上利用def保留字定义，且有参数df的函数可以实现参数不同时的代码共用。</li><li>while是执行循环的保留字<br><em>扩展：for…in… 计算思维、抽象和自动化<br>def…while… 试错</em></li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><strong>GRIT 坚毅——获得成功<br>持之以恒，天天向上的力量很惊人</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;今天是中秋节，继续整理一下笔记吧。最近任务比较多，博客就慢慢更吧。&lt;br&gt;第三章第二节来通过一个实例来展示数字类型的具体应用，同时也让我知道努力学习的重要性。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基本数据类型（一）</title>
    <link href="http://yoursite.com/2018/09/23/Python-3-1/"/>
    <id>http://yoursite.com/2018/09/23/Python-3-1/</id>
    <published>2018-09-23T03:38:55.000Z</published>
    <updated>2018-09-23T04:33:05.973Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>第三章是关于数据类型的内容，涉及数字类型及其操作、列表类型、字符串类型及其操作等。<br>同时穿插实例来应用数据类型。第一节是关于数字类型及其操作的内容。</em></p></blockquote><a id="more"></a><h1 id="数字类型及其操作"><a href="#数字类型及其操作" class="headerlink" title="数字类型及其操作"></a>数字类型及其操作</h1><hr><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>-可正可负<br><code>pow(x,y) #计算x的y次方</code><br>-十进制<br>-二进制 以0b或0B开头<br>-八进制 以0o或0O开头<br>-十六进制 以0x或0X开头</p><h3 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h3><p>浮点数的概念与实数概念一致<br>-带有小数点及小数<br>-浮点数取值范围和小数精度存在限制，但常规计算可忽略<br><em>浮点数间的运算存在不确定尾数，不是bug</em><br>解释：二进制表示小数，可以无限接近，但不完全相同</p><p><code>round(x,d) #对x四舍五入，d是小数截取位数</code><br><em>浮点数间运算及比较用round()函数辅助</em><br>科学记数法:用e或E作为幂的符号</p><h3 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h3><p>如3+4j ————与数学中的复数概念一致<br><code>z.real() #获得实部</code><br><code>z.imag() #获得虚部</code><br><code>abs() #为复数取模</code></p><h2 id="数字类型操作"><a href="#数字类型操作" class="headerlink" title="数字类型操作"></a>数字类型操作</h2><h3 id="数值运算操作符"><a href="#数值运算操作符" class="headerlink" title="数值运算操作符"></a>数值运算操作符</h3><table><thead><tr><th style="text-align:center">操作符及其使用</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">x/y</td><td style="text-align:left">产生浮点数结果</td></tr><tr><td style="text-align:center">x//y</td><td style="text-align:left">产生证书结果</td></tr><tr><td style="text-align:center">+x</td><td style="text-align:left">x本身</td></tr><tr><td style="text-align:center">-y</td><td style="text-align:left">y的负值</td></tr><tr><td style="text-align:center">x%y</td><td style="text-align:left">余数，模运算10%3结果是1</td></tr><tr><td style="text-align:center">x**y</td><td style="text-align:left">幂运算，x的y次幂</td></tr></tbody></table><p>二元操作符(x=x op y)</p><table><thead><tr><th style="text-align:center">增强操作符及其使用</th></tr></thead><tbody><tr><td style="text-align:center">x+=y</td></tr><tr><td style="text-align:center">x-=y</td></tr><tr><td style="text-align:center">x*=y</td></tr><tr><td style="text-align:center">x/=y</td></tr><tr><td style="text-align:center">x//=y</td></tr><tr><td style="text-align:center">x%=y</td></tr><tr><td style="text-align:center">x**=y</td></tr></tbody></table><p><strong>注：类型之间可进行混合运算，生成”最宽的类型“</strong><br>（整数&lt;浮点数&lt;复数）</p><h3 id="数值运算函数"><a href="#数值运算函数" class="headerlink" title="数值运算函数"></a>数值运算函数</h3><table><thead><tr><th style="text-align:center">函数及使用</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">abs(x)</td><td style="text-align:left">x的绝对值</td></tr><tr><td style="text-align:center">divmod(x,y)</td><td style="text-align:left">商余(x//y,x%y)，同时输出商和余数</td></tr><tr><td style="text-align:center">pow(x,y[,z])</td><td style="text-align:left">幂余，(x**y)%z，z可省略</td></tr><tr><td style="text-align:center">round(x[,d])</td><td style="text-align:left">四舍五入，d是保留小数位数，默认为0</td></tr><tr><td style="text-align:center">max(x1,x2,…,xn)</td><td style="text-align:left">最大值，返回x1,x2,…,xn的最大值，n不限</td></tr><tr><td style="text-align:center">min(x1,x2,…,xn)</td><td style="text-align:left">最小值，返回x1,x2,…,xn的最小值，n不限</td></tr><tr><td style="text-align:center">int(x)</td><td style="text-align:left">将x变成整数，舍弃小数部分</td></tr><tr><td style="text-align:center">float(x)</td><td style="text-align:left">将x变成浮点数，增加小数部分 eg. <code>float(&quot;1.23&quot;) #结果为1.23</code></td></tr><tr><td style="text-align:center">complex(x)</td><td style="text-align:left">将x变成复数，增加虚数部分</td></tr></tbody></table><p><strong>注：使用函数input()时，Python将用户输入解读为字符串。<br>可用int()函数，将Python输入视为数值。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;第三章是关于数据类型的内容，涉及数字类型及其操作、列表类型、字符串类型及其操作等。&lt;br&gt;同时穿插实例来应用数据类型。第一节是关于数字类型及其操作的内容。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python基本图形绘制</title>
    <link href="http://yoursite.com/2018/09/22/python-2/"/>
    <id>http://yoursite.com/2018/09/22/python-2/</id>
    <published>2018-09-22T12:13:29.000Z</published>
    <updated>2018-09-22T13:14:33.977Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>继续Python笔记的整理，第二章是库的基本用法以及利用turtle库绘图的实例。</em></p></blockquote><a id="more"></a><h1 id="深入理解Python语言"><a href="#深入理解Python语言" class="headerlink" title="深入理解Python语言"></a>深入理解Python语言</h1><hr><h2 id="计算机技术的演进："><a href="#计算机技术的演进：" class="headerlink" title="计算机技术的演进："></a>计算机技术的演进：</h2><p>1.计算机系统结构时代   计算机能力问题<br>2.网络和视窗时代          交互问题<br>3.复杂信息系统时代       数据问题<br>4.人工智能时代           人类问题<br>当前:新计算时代</p><h2 id="编程语言的多样初心："><a href="#编程语言的多样初心：" class="headerlink" title="编程语言的多样初心："></a>编程语言的多样初心：</h2><p>C：<br>指针、内存、数据类型<br>语言本质：理解计算机系统结构<br>解决问题：性能<br>java：<br>面向对象<br>对象、跨平台、运行时<br>…<br>python：<br>理解问题的求解</p><h2 id="python语言的特点："><a href="#python语言的特点：" class="headerlink" title="python语言的特点："></a>python语言的特点：</h2><p><em>通用性</em>强制可读性<br><em>较少的底层语法元素</em>多种编程方式<br>*支持中文字符</p><h2 id="语法简介"><a href="#语法简介" class="headerlink" title="语法简介"></a>语法简介</h2><p>生态高产:python是最高产的程序设计语言<br>工具决定思维</p><h2 id="“超级语言的诞生”"><a href="#“超级语言的诞生”" class="headerlink" title="“超级语言的诞生”"></a>“超级语言的诞生”</h2><p>机器语言、汇编语言——不适合编程<br>高级语言，与CPU无关——适合编程<br>超级语言，庞大的计算生态。python——唯一的超级语言</p><h1 id="实例二：Python蟒蛇绘制"><a href="#实例二：Python蟒蛇绘制" class="headerlink" title="实例二：Python蟒蛇绘制"></a>实例二：Python蟒蛇绘制</h1><hr><p>下面先给出代码，再进行代码分析</p><h2 id="蟒蛇绘制代码"><a href="#蟒蛇绘制代码" class="headerlink" title="蟒蛇绘制代码"></a>蟒蛇绘制代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#PythonDraw.py</span><br><span class="line">import turtle</span><br><span class="line">turtle.setup(650,350,200,200)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.fd(-250)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pensize(25)</span><br><span class="line">turtle.pencolor(&quot;gold&quot;)</span><br><span class="line">turtle.seth(-40)</span><br><span class="line">for i in range(4):</span><br><span class="line">    turtle.circle(40,80)</span><br><span class="line">    turtle.circle(-40,80)</span><br><span class="line">turtle.circle(40,80/2)</span><br><span class="line">turtle.fd(40)</span><br><span class="line">turtle.circle(16,180)</span><br><span class="line">turtle.fd(40 * 2/3)</span><br><span class="line">turtle.done()    #关闭turtle，一般在使用完turtle后添加，否则会无响应</span><br></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="库引用与import"><a href="#库引用与import" class="headerlink" title="库引用与import"></a>库引用与import</h3><pre><code>库引用：扩充Python程序功能的方式</code></pre><p>1.使用import保留字完成，采用如下编码风格<br>import&lt;库名&gt;<br>&lt;库名&gt;.&lt;函数名&gt;(&lt;函数参数&gt;)</p><p>2.使用from和import来简化代码<br>例：<code>import turtle</code><br><code>from turtle import*/from &lt;库名&gt; import &lt;函数名&gt;   (&lt;函数参数&gt;)</code></p><p>比较：<br>第一种方法不会出现函数重名的现象<br>第二种方法会出现</p><p>3.使用import和as保留字共同完成<br><code>import&lt;库名&gt;as&lt;库别名&gt;</code><br>&lt;库别名&gt;.&lt;函数名称&gt;(&lt;函数参数&gt;)<br>–给调用的外部库关联一个更短、更适合自己的名字<br><strong>建议第三种方法</strong></p><h3 id="turtle绘图窗体"><a href="#turtle绘图窗体" class="headerlink" title="turtle绘图窗体"></a>turtle绘图窗体</h3><p><code>turtle.setup(width,height,startx,starty)</code><br>-setup()设置窗体的大小及位置<br>-4个参数中后两个可选,去掉后默认在屏幕的正中心</p><h3 id="turtle画笔控制函数"><a href="#turtle画笔控制函数" class="headerlink" title="turtle画笔控制函数"></a>turtle画笔控制函数</h3><p><code>turtle.penup()  #别名 turtle.pu  ————抬起画笔</code><br><code>turtle.pendown()  #别名 turtle.pd  ————落下画笔</code><br><code>turtle.pensize(width)  #别名 turtle.width(width) ————画笔宽度</code><br><code>turtle.pencolor(color)  #————color为颜色字符串或者rgb值</code><br><code>turtle.colormode()  #————设置画笔RGB颜色的表示模式</code></p><p>画笔颜色有三种形式：<br>1.颜色字符串<br>2.rgb的小数值<br>3.rgb的元组值<br>附:rgb色彩体系<br>    rgb由三种基本颜色构成万物色<br>红黄蓝 0-255 整数或 0-1小数</p><p><code>turtle.colormode(mode)</code><br>-1.0小数值<br>-255整数值</p><h3 id="运动控制函数"><a href="#运动控制函数" class="headerlink" title="运动控制函数"></a>运动控制函数</h3><p>1.空间坐标体系，坐标原点在画布的正中心<br><code>turtle.goto(x,y) #————去到那个坐标</code><br>2.<code>turtle.forword(d) #别名 turtle.fd(d) ————向前前进</code><br><code>turtle.bk(d) #————后退</code><br>-d:进距离，可以为负数<br>弧形:<br><code>turtle.circle(r,extent)</code><br>-r:半径<br>-extent:绘制的弧度<br>半径是负数:圆心在右侧</p><h3 id="turtle方向控制函数（角度坐标体系）"><a href="#turtle方向控制函数（角度坐标体系）" class="headerlink" title="turtle方向控制函数（角度坐标体系）"></a>turtle方向控制函数（角度坐标体系）</h3><pre><code>控制海龟面对方向：绝对角度&amp;海龟角度</code></pre><p><code>turtle.setheading(angle） #别名 turtle.seth(angle) ————改变行进方向，海龟走角度</code><br><code>turtle.left(angle) #————海龟向左转</code><br><code>turtle.right(angle) #————海龟向右转</code><br>-angle:角度<br>只改变方向，不移动</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;继续Python笔记的整理，第二章是库的基本用法以及利用turtle库绘图的实例。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基本语法元素</title>
    <link href="http://yoursite.com/2018/09/22/Python-1/"/>
    <id>http://yoursite.com/2018/09/22/Python-1/</id>
    <published>2018-09-22T10:45:17.000Z</published>
    <updated>2018-09-22T12:31:52.128Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>之前学习Python的笔记排版过于凌乱，现在<br> 决定重新整理一下，以便日后的复习和使用。</em></p></blockquote> <a id="more"></a><h1 id="程序设计基本方法"><a href="#程序设计基本方法" class="headerlink" title="程序设计基本方法"></a>程序设计基本方法</h1><hr><h2 id="计算机特性"><a href="#计算机特性" class="headerlink" title="计算机特性"></a>计算机特性</h2><pre><code>功能性可编程性</code></pre><h2 id="摩尔定律"><a href="#摩尔定律" class="headerlink" title="摩尔定律"></a>摩尔定律</h2><pre><code>集成电路单位面积晶体管数约两年增长一倍</code></pre><p>预测很准确</p><h2 id="编译和解释"><a href="#编译和解释" class="headerlink" title="编译和解释"></a>编译和解释</h2><p>源代码-&gt;目标代码</p><pre><code>编译：将原代码一次性转化为目标代码解释：逐条,类似于实时静态语言：编译脚本语言：解释</code></pre><h2 id="程序的基本编写方法"><a href="#程序的基本编写方法" class="headerlink" title="程序的基本编写方法"></a>程序的基本编写方法</h2><pre><code>IPO输入 处理 输出输入是程序的开始输出是程序的结束处理方法——算法</code></pre><h2 id="编程解决问题的步骤"><a href="#编程解决问题的步骤" class="headerlink" title="编程解决问题的步骤"></a>编程解决问题的步骤</h2><pre><code>分析问题划分边界设计算法编写程序测试程序维护程序</code></pre><h2 id="计算机编程"><a href="#计算机编程" class="headerlink" title="计算机编程"></a>计算机编程</h2><pre><code>基础套路练习</code></pre><h1 id="实例1：温度转换"><a href="#实例1：温度转换" class="headerlink" title="实例1：温度转换"></a>实例1：温度转换</h1><hr> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#TempConvert.py</span><br><span class="line">TempStr = input(&quot;请输入带有符号的温度值：&quot;)</span><br><span class="line">if TempStr[-1] in [&apos;F&apos;,&apos;f&apos;]:</span><br><span class="line">    C = (eval(TempStr[0:-1]) - 32)/1.8</span><br><span class="line">    print(&quot;转化后的温度是&#123;:.2f&#125;C&quot;.format(C))</span><br><span class="line">elif TempStr[-1] in [&apos;C&apos;,&apos;c&apos;]:</span><br><span class="line">    F = 1.8*eval(TempStr[0:-1]) + 32</span><br><span class="line">    print(&quot;转化后的温度是&#123;:.2f&#125;F&quot;.format(F))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;输入格式错误&quot;)</span><br></pre></td></tr></table></figure><p>   这段代码很简单，但是也包含了很多Python的语法元素，下面来具体分析：</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre><code>Python的注释有两种方法：1.# 一个井号，一般用于单行注释2.&apos;&apos;&apos; &apos;&apos;&apos;或者&quot;&quot;&quot; &quot;&quot;&quot; 一对单引号或双引号，一般用于多行注释</code></pre><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><pre><code>缩进是Python的强制语法要求，表达语句间的关系</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code>变量采用标识名来表示变量命名字符：   大小写字母、数字、下划线和汉字及组合   注意：大小写敏感、首字符不能是数字、不能与保留字相同</code></pre><p>其中Python的保留字如下：（33个）<br><img src="/py/保留字.png" alt="保留字" title="保留字"></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><pre><code>定义：由一对单引号或双引号标识的字符的有序序列字符串的索引方式：正向递增序号 0 1 2 3 4 5 反向递增序号 -6 -5 -4 -3 -2 -1索引——返回某一个单个字符   &lt;  &gt;[M]切片——返回字符串的某一段字符  &lt;  &gt;[M：N]如温度转换实例中的TempStr[0:-1]表示的是从0开始读到最后一个字符串的字符相当于去掉最后一个字符</code></pre><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><pre><code>整数浮点数</code></pre><h3 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h3><pre><code>列表用[]表示，采用(,)分隔各元素       [&apos;F&apos;,&apos;f&apos;]表示两个元素’F&apos;或‘f’使用保留字in判断一个元素是否在列表中</code></pre><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><pre><code>赋值语句：由赋值符号构成的一行代码分支语句：由判断条件决定程序运行方向的语句</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre><code>根据输入参数产生不同输出的过程</code></pre><h3 id="程序的输入输出"><a href="#程序的输入输出" class="headerlink" title="程序的输入输出"></a>程序的输入输出</h3><pre><code>input()——从控制台获得用户输入的函数括号中是提示信息字符串         print——以字符型式像控制台输出结果的函数print函数的格式化{}表示槽  后续变量填充到槽中eval函数（评估函数）去掉参数最外侧引号并执行余下语句能将字符串语句的信息变成语句</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;之前学习Python的笔记排版过于凌乱，现在&lt;br&gt; 决定重新整理一下，以便日后的复习和使用。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="http://yoursite.com/2018/09/22/%E7%AC%AC1%E7%AF%87%E5%8D%9A%E6%96%87/"/>
    <id>http://yoursite.com/2018/09/22/第1篇博文/</id>
    <published>2018-09-22T02:01:56.000Z</published>
    <updated>2018-09-22T13:20:31.680Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>1.字体字号    2.分级标题<br>3.超链接      4.列表<br>5.插入图片    6.表格<br>7.分割线      8.引用<br>9.代码        10.流程图</em></p></blockquote><a id="more"></a><p>1.字体字号</p><p><em>这是斜体</em>或<em>这也是斜体</em><br><strong>这是粗体</strong><br><strong><em>这是加粗斜体</em></strong><br><del>这是删除线</del></p><p>改变字体、大小、颜色</p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="red">我是红色</font><br><font color="#008000">我是绿色</font><br><font color="Blue">我是蓝色</font><br><font size="5">我是尺寸</font><br><font face="黑体" color="green" size="5">我是黑体，绿色，尺寸为5</font><p>为文字添加背景色</p><table><tr><td bgcolor="yellow">背景色yellow</td></tr></table><p>2.分级标题</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>3.超链接</p><p>行内格式：<a href="https://gitergreat.github.io/" target="_blank" rel="noopener">我的博客</a><br>参考格式：[我的博客][1],百度[2]<br>[1]:<a href="https://gitergreat.github.io/" target="_blank" rel="noopener">https://gitergreat.github.io/</a><br>[2]:<a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a><br>自动链接：我的博客地址<a href="https://gitergreat.github.io/" target="_blank" rel="noopener">https://gitergreat.github.io/</a></p><p>4.列表</p><p>无序列表：<br>写法：</p><ul><li>无序列表1</li></ul><ul><li>无序列表2</li></ul><ul><li>无序列表3</li></ul><p>有序列表：<br>写法：<br>1.有序列表1<br>2.有序列表2<br>3.有序列表3</p><p>列表嵌套：<br>上一级和下一级之间敲三个空格即可</p><p>5.插入图片</p><p><img src="/images/ki.jpg" alt="Kyire Irving" title="Kyire Irving"></p><p>设置图片大小、位置<br><img src="/images/ki.jpg" width="50%" height="50%"></p><p><img src="/images/ki.jpg" width="251" height="350"></p><div align="right"><img src="/images/ki.jpg" width="50%" height="50%"></div><p>6.表格</p><table><thead><tr><th>表头1</th><th style="text-align:left">表头2</th><th style="text-align:center">表头3</th><th style="text-align:right">表头4</th></tr></thead><tbody><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对齐</td><td style="text-align:right">右对齐</td></tr><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对齐</td><td style="text-align:right">右对齐</td></tr><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对齐</td><td style="text-align:right">右对齐</td></tr></tbody></table><p>7.分割线</p><hr><hr><hr><hr><p>8.引用</p><blockquote><p>这是引用内容</p><blockquote><p>这是引用内容</p><blockquote><p>这是引用内容</p></blockquote></blockquote></blockquote><p>9.代码</p><p><code>print(&quot;Hello world!&quot;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br></pre></td></tr></table></figure><p>10.流程图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;1.字体字号    2.分级标题&lt;br&gt;3.超链接      4.列表&lt;br&gt;5.插入图片    6.表格&lt;br&gt;7.分割线      8.引用&lt;br&gt;9.代码        10.流程图&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Markdown语法" scheme="http://yoursite.com/categories/Markdown%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
