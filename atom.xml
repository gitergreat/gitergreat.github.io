<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Greatness</title>
  
  <subtitle>记录自己的学习过程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-12T01:48:58.519Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.W</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python函数和代码复用（一）</title>
    <link href="http://yoursite.com/2018/10/12/Python-5-1/"/>
    <id>http://yoursite.com/2018/10/12/Python-5-1/</id>
    <published>2018-10-12T01:36:52.000Z</published>
    <updated>2018-10-12T01:48:58.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>第一节，函数的定义和使用</em></p></blockquote><a id="more"></a><h1 id="函数的定义和使用"><a href="#函数的定义和使用" class="headerlink" title="函数的定义和使用"></a>函数的定义和使用</h1><hr><h2 id="函数的理解和定义"><a href="#函数的理解和定义" class="headerlink" title="函数的理解和定义"></a>函数的理解和定义</h2><pre><code>函数是一段代码的表示</code></pre><p>——是一段具有特定功能的、可重用的语句组<br>——是一种功能的抽象，一般函数表达特定功能<br>——两个作用：降低变成难度 和 代码复用</p><pre><code>def&lt;函数名&gt;(&lt;参数（0个或多个）&gt;):    &lt;函数体&gt;    return&lt;返回值&gt;</code></pre><p>-函数定义时，所制定的参数是一种占位符<br>-函数定义后，如果不经过调用，不会被执行<br>-函数定义时，参数时输入、函数体是处理、结果是输出（IPO）</p><h2 id="函数的使用及调用过程"><a href="#函数的使用及调用过程" class="headerlink" title="函数的使用及调用过程"></a>函数的使用及调用过程</h2><p>调用时运行函数代码的方法：<br>调用时 实际参数 替换形式参数  得到  返回值</p><h2 id="函数的参数传递："><a href="#函数的参数传递：" class="headerlink" title="函数的参数传递："></a>函数的参数传递：</h2><p>参数个数：可有可无 必须有括号</p><p>可选参数传递：函数定义时可以为某些参数指定默认值，构成可选参数</p><pre><code>def&lt;函数名&gt;(&lt;非可选参数&gt;,&lt;可选参数&gt;):    &lt;函数体&gt;    return&lt;返回值&gt;</code></pre><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def fact(n,m=1):</span><br><span class="line">    s = 1</span><br><span class="line">    for i in range(1,n+1):</span><br><span class="line">        s *= i</span><br><span class="line">    return s//m</span><br><span class="line">#若不给m赋值，m默认为1</span><br></pre></td></tr></table></figure><p>可变参数传递：</p><p>函数定义时可以设计可变数量参数，即不确定参数总数量</p><pre><code>def&lt;函数名&gt;(&lt;参数&gt;,*b):    &lt;函数体&gt;    return&lt;返回值&gt;</code></pre><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#计算n!乘数</span><br><span class="line">def fact(n,*b):    #b 为可变参数</span><br><span class="line">    s = 1</span><br><span class="line">    for i in range(1,n+1):</span><br><span class="line">        s *= i</span><br><span class="line">    for item in b:  #这里的b是组合数据类型</span><br><span class="line">        s *= item</span><br><span class="line">    return s</span><br></pre></td></tr></table></figure><pre><code>调用：fact(10,3)fact(10,3,5,8)</code></pre><p>参数传递的两种方式：位置或名称传递<br>名称：直接规定形参的值</p><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>函数可以返回0个或多个结果<br>-return保留字用来传递返回值<br>-函数可以有返回值，也可以没有，可以有return，也可以没有<br>-return可以传递0个返回值，也可以传递任意多个返回值</p><p>（,,,）元组类型</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def fact(n, n=1):</span><br><span class="line">    s = 1</span><br><span class="line">    for i in range(1,n+1):</span><br><span class="line">        s*=i</span><br><span class="line">    return s//m,n,m</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;第一节，函数的定义和使用&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python程序控制结构（五）</title>
    <link href="http://yoursite.com/2018/10/12/Python-4-5/"/>
    <id>http://yoursite.com/2018/10/12/Python-4-5/</id>
    <published>2018-10-12T01:26:03.000Z</published>
    <updated>2018-10-12T01:33:17.621Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>第五节，实例6：圆周率的计算</em></p></blockquote><a id="more"></a><h1 id="实例6：圆周率的计算"><a href="#实例6：圆周率的计算" class="headerlink" title="实例6：圆周率的计算"></a>实例6：圆周率的计算</h1><h2 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h2><p>1、公式计算<br>2、蒙特卡罗方法：撒点</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#CalPiV2.py</span><br><span class="line">from random import random</span><br><span class="line">from time import perf_counter</span><br><span class="line">DARTS = 1000*1000*10</span><br><span class="line">hits = 0.0</span><br><span class="line">start = perf_counter()</span><br><span class="line">for i in range(1,DARTS+1):</span><br><span class="line">    x,y = random(),random()</span><br><span class="line">    dist = pow(x**2+y**2,0.5)</span><br><span class="line">    if dist&lt;=1.0:</span><br><span class="line">        hits = hits + 1</span><br><span class="line">pi = 4*(hits/DARTS)</span><br><span class="line">print(&quot;圆周率值是：&#123;&#125;&quot;.format(pi))</span><br><span class="line">print(&quot;运行时间是：&#123;:.5f&#125;s&quot;.format(perf_counter()-start))</span><br><span class="line">#一段代码用   \   可以进行换行</span><br></pre></td></tr></table></figure><h2 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h2><p>理解方法思维：<br>-数学思维<br>-计算思维<br>谁更准确？</p><p>程序运行时间分析：<br>-使用time库计算获得程序运行时间<br>-改变撒点数量，理解程序运行时间的分布<br>-初步掌握简单的程序性能分析方法</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;第五节，实例6：圆周率的计算&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python程序控制结构（四）</title>
    <link href="http://yoursite.com/2018/10/12/Python-4-4/"/>
    <id>http://yoursite.com/2018/10/12/Python-4-4/</id>
    <published>2018-10-12T01:06:30.000Z</published>
    <updated>2018-10-12T01:25:19.624Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>第四节，random库的使用</em></p></blockquote><a id="more"></a><h1 id="random库的使用"><a href="#random库的使用" class="headerlink" title="random库的使用"></a>random库的使用</h1><hr><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>-random库：random库是使用随机数的Python标准库<br>-伪随机数：采用梅森旋转算法生成的（伪）随机序列中的元素<br>-random库用于生成随机数<br>-使用random库：import random</p><p>两类函数：常用8个：</p><pre><code>-基本随机数函数：seed()，random()-扩展随机数函数：randint()，getrandbits()，uniform()，ranrange()，choice()，shuffle()</code></pre><h3 id="基本随机数函数"><a href="#基本随机数函数" class="headerlink" title="基本随机数函数"></a>基本随机数函数</h3><p>随机数种子———梅森旋转算法———随机序列（随机数）</p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">seed(a=None)</td><td style="text-align:left">初始化给定的随机数种子，默认为当前系统时间</td></tr><tr><td style="text-align:center">random()</td><td style="text-align:left">生成一个(0.0,1.0)之间的随机小数</td></tr></tbody></table><pre><code>import randomrandom.seed(10)random.random()......random.random()......</code></pre><p>-种子可以只给一次也可以不给<br>-种子可以让随机数在现</p><h3 id="扩展随机数函数"><a href="#扩展随机数函数" class="headerlink" title="扩展随机数函数"></a>扩展随机数函数</h3><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">randint(a,b)</td><td style="text-align:left">生成一个(a,b)之间的整数</td></tr><tr><td style="text-align:center">randrange(m,n[,k])</td><td style="text-align:left">生成一个(m,n)之间以k为步长的随机整数</td></tr><tr><td style="text-align:center">getrandbits(k)</td><td style="text-align:left">生成一个k比特长的随机整数</td></tr><tr><td style="text-align:center">uniform(a,b)</td><td style="text-align:left">生成一个(a,b)之间的随机小数</td></tr><tr><td style="text-align:center">choice(seq)</td><td style="text-align:left">从序列seq中随机选择一个元素</td></tr><tr><td style="text-align:center">shuffle(seq)</td><td style="text-align:left">将序列seq中元素随机排列，返回打乱后的序列</td></tr></tbody></table><p>-能过利用随机种子产生“确定”伪随机数<br>-能够产生随机整数<br>-能够对序列类型进行随机操作</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;第四节，random库的使用&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python程序控制结构（三）</title>
    <link href="http://yoursite.com/2018/10/12/Python-4-3/"/>
    <id>http://yoursite.com/2018/10/12/Python-4-3/</id>
    <published>2018-10-12T00:49:49.000Z</published>
    <updated>2018-10-12T01:04:47.175Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>第三节，程序的循环结构</em></p></blockquote><a id="more"></a><h1 id="程序的循环结构"><a href="#程序的循环结构" class="headerlink" title="程序的循环结构"></a>程序的循环结构</h1><hr><h2 id="遍历循环"><a href="#遍历循环" class="headerlink" title="遍历循环"></a>遍历循环</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>-遍历某个结构形成的循环方式</p><pre><code>for  &lt;循环变量&gt; in &lt;遍历结构&gt; :    &lt;语句块&gt;</code></pre><p>-从遍历结构中逐一提取元素放入循环变量</p><h3 id="遍历循环的应用"><a href="#遍历循环的应用" class="headerlink" title="遍历循环的应用"></a>遍历循环的应用</h3><p>1、记数循环（N次）</p><pre><code>for i in range(N):&lt;语句块&gt;-遍历由range()函数产生的数字序列，产生循环</code></pre><p>2、for i in range(M,N,K)   特定次</p><pre><code>&lt;语句块&gt;-遍历由range（）函数产生的数字序列，产生循环从M开始到N之前的整数，以K为步长</code></pre><p>3、字符串遍历循环</p><pre><code>for c in s:&lt;语句块&gt;-s是字符串，遍历字符串每个字符，产生循环-c表示字符串的每一个字符对每一个字符运行一次语句块</code></pre><p>4、列表遍历循环</p><pre><code>for item in ls:&lt;语句块&gt;-ls是一个列表，遍历其每个元素，产生循环for item  in [123,&quot;PY&quot;,456]:print(item,end=&quot;,&quot;)结果：123,PY,456</code></pre><p>5、文件遍历循环</p><pre><code>for line in fi:&lt;语句块&gt;-fi是一个文件标识符，遍历其每行，产生循环遍历文件的每一行</code></pre><p><strong>观点：数据类型是由多个元素构成的，都可以用for in遍历</strong></p><h2 id="无限循环：由条件控制的循环运行方式"><a href="#无限循环：由条件控制的循环运行方式" class="headerlink" title="无限循环：由条件控制的循环运行方式"></a>无限循环：由条件控制的循环运行方式</h2><pre><code>while &lt;条件&gt;：&lt;语句块&gt;ctrl c退出</code></pre><h2 id="循环控制的保留字"><a href="#循环控制的保留字" class="headerlink" title="循环控制的保留字"></a>循环控制的保留字</h2><p>break和continue<br>-break只能跳出一层循环</p><h2 id="循环的高级用法"><a href="#循环的高级用法" class="headerlink" title="循环的高级用法"></a>循环的高级用法</h2><pre><code>for &lt;循环变量&gt;in&lt;遍历结构&gt;:&lt;语句块1&gt;else:&lt;语句块2&gt;while&lt;条件&gt;:&lt;语句块1&gt;else:&lt;语句块2&gt;</code></pre><p>循环与else：<br>-当循环没有被break语句退出时，执行else语句块<br>-else语句块作为“正常”完成循环的奖励<br>-这里else的用法与异常处理中的else用法类似</p><p><strong>能用于了解一段循环中是否被break退出</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;第三节，程序的循环结构&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python程序控制结构（二）</title>
    <link href="http://yoursite.com/2018/10/10/Python-4-2/"/>
    <id>http://yoursite.com/2018/10/10/Python-4-2/</id>
    <published>2018-10-10T06:34:00.000Z</published>
    <updated>2018-10-10T06:38:05.916Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>第二节，实例5：身体质量指数BMI</em></p></blockquote><a id="more"></a><h1 id="身体质量指数BMI"><a href="#身体质量指数BMI" class="headerlink" title="身体质量指数BMI"></a>身体质量指数BMI</h1><hr><h2 id="背景分析"><a href="#背景分析" class="headerlink" title="背景分析"></a>背景分析</h2><p>BMI:体重（kg）/身高的平方（m）<br>问题需求:<br>-输入：给定身高和体重值<br>-输出：BMI国内标准 国际标准</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#CalBMIv3.py</span><br><span class="line">height,weight = eval(input(&quot;请输入身高（米）和体重（公斤）[逗号隔开]：&quot;))</span><br><span class="line">bmi = weight / pow(height,2)</span><br><span class="line">print(&quot;BMI数值为:&#123;:.2f&#125;&quot;.format(bmi))</span><br><span class="line">who,nat = &quot;&quot;,&quot;&quot;</span><br><span class="line">if bmi &lt; 18.5:</span><br><span class="line">    who,nat = &quot;偏瘦&quot;,&quot;偏瘦&quot;</span><br><span class="line">elif 18.5&lt;=bmi&lt;24:</span><br><span class="line">    who,nat = &quot;正常&quot;,&quot;正常&quot;</span><br><span class="line">elif 24&lt;=bmi&lt;25:</span><br><span class="line">    who,nat = &quot;正常&quot;,&quot;偏胖&quot;</span><br><span class="line">elif 25&lt;=bmi&lt;28:</span><br><span class="line">    who,nat = &quot;偏胖&quot;,&quot;偏胖&quot;</span><br><span class="line">elif 28&lt;=bmi&lt;30:</span><br><span class="line">    who,nat = &quot;偏胖&quot;,&quot;肥胖&quot;</span><br><span class="line">else:</span><br><span class="line">    who,nat = &quot;肥胖&quot;,&quot;肥胖&quot;</span><br><span class="line">print(&quot;BMI指标为：国际&apos;&#123;0&#125;&apos;，国内‘&#123;1&#125;&apos;&quot;.format(who,nat))</span><br></pre></td></tr></table></figure><p>举一反三：<br>关注多条件的组合：<br>-多分支条件之间的覆盖是重要问题<br>-程序可运行，但不正确，要注意多分支<br>-分支结构是程序的重要框架，读程序先看分支</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;第二节，实例5：身体质量指数BMI&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python程序控制结构（一）</title>
    <link href="http://yoursite.com/2018/10/10/Python-4-1/"/>
    <id>http://yoursite.com/2018/10/10/Python-4-1/</id>
    <published>2018-10-10T05:55:39.000Z</published>
    <updated>2018-10-10T06:21:00.999Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>第四章，程序控制结构。包括分支、循环结构。以及两个实例和random库的使用。</em></p></blockquote><a id="more"></a><h1 id="程序分支结构"><a href="#程序分支结构" class="headerlink" title="程序分支结构"></a>程序分支结构</h1><h2 id="1、单分支结构"><a href="#1、单分支结构" class="headerlink" title="1、单分支结构"></a>1、单分支结构</h2><p>if&lt;条件&gt;:<br>  &lt;语句块&gt;</p><p>if Ture:<br>  &lt;语句块&gt;</p><h2 id="2、二分支结构"><a href="#2、二分支结构" class="headerlink" title="2、二分支结构"></a>2、二分支结构</h2><p>if…else</p><p>紧凑形式：适用于简单表达式的二分支结构<br>&lt;表达式1&gt;if&lt;条件&gt;else&lt;表达式2&gt;<br>（表达式：是语句的一部分  不支持赋值）</p><h2 id="3、多分支结构"><a href="#3、多分支结构" class="headerlink" title="3、多分支结构"></a>3、多分支结构</h2><p>if &lt;条件&gt;:<br>  &lt;语句块1&gt;<br>elif:<br>  &lt;语句块2&gt;<br>  ……<br>else:<br>  &lt;语句块2&gt;</p><p><strong>注意：多条件之间的包含关系<br>    变量取值范围的覆盖</strong></p><h2 id="4、条件判断及组合"><a href="#4、条件判断及组合" class="headerlink" title="4、条件判断及组合"></a>4、条件判断及组合</h2><p>操作符：&lt;  &lt;= &gt;= &gt; == !=</p><p>用于条件判断的三个保留字:<br>x and y<br>x or y<br>not x<br>与或非</p><h2 id="5、程序的异常处理"><a href="#5、程序的异常处理" class="headerlink" title="5、程序的异常处理"></a>5、程序的异常处理</h2><p>try:<br>  &lt;语句块1&gt;<br>except:<br>  &lt;语句块2&gt;</p><p>try:<br>  &lt;语句块1&gt;<br>except&lt;异常类型&gt;:<br>  &lt;语句块2&gt;<br>&lt;异常类型&gt;   NameError</p><p>try:<br>  &lt;语句块1&gt;<br>except:<br>  &lt;语句块2&gt;<br>else:<br>  &lt;语句块3&gt;<br>finally:<br>  &lt;语句块4&gt;</p><p>-finally对应语句块4一定执行<br>-else对应语句块3在不发生异常时执行</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;第四章，程序控制结构。包括分支、循环结构。以及两个实例和random库的使用。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基本数据类型（五）</title>
    <link href="http://yoursite.com/2018/10/10/Python-3-5/"/>
    <id>http://yoursite.com/2018/10/10/Python-3-5/</id>
    <published>2018-10-10T00:20:00.000Z</published>
    <updated>2018-10-10T00:32:52.368Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>第五节，应用Python time库来实现文本进度条</em></p></blockquote><a id="more"></a><h1 id="实例4：文本进度条"><a href="#实例4：文本进度条" class="headerlink" title="实例4：文本进度条"></a>实例4：文本进度条</h1><hr><h2 id="文本进度条简述"><a href="#文本进度条简述" class="headerlink" title="文本进度条简述"></a>文本进度条简述</h2><p>-采用字符串方式打印可以动态变化的文本进度条<br>-进度条需要能在一行中逐渐变化</p><h2 id="文本进度条的简单开始"><a href="#文本进度条的简单开始" class="headerlink" title="文本进度条的简单开始"></a>文本进度条的简单开始</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#TextProBarV1.py</span><br><span class="line">import time</span><br><span class="line">scale = 10</span><br><span class="line">print(&quot;------执行开始------&quot;)</span><br><span class="line">for i in range(scale+1):</span><br><span class="line">    a = &apos;*&apos; * i</span><br><span class="line">    b = &apos;.&apos; * (scale - i)</span><br><span class="line">    c = (i/scale)*100</span><br><span class="line">    print(&quot;&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&quot;.format(c,a,b))</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">print(&quot;------执行结束------&quot;)</span><br></pre></td></tr></table></figure><h2 id="文本进度条的单行动态刷新"><a href="#文本进度条的单行动态刷新" class="headerlink" title="文本进度条的单行动态刷新"></a>文本进度条的单行动态刷新</h2><p>-刷新的本质是：用后打印的字符覆盖之前的字符<br>-不能换行：print()需要被控制<br>-要能回退：打印后光标退回到之前的位置 \r</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#TextProBarV1.py</span><br><span class="line">import time</span><br><span class="line">for i in range(101):</span><br><span class="line">    print(&quot;\r&#123;:3&#125;%&quot;.format(i),end=&quot;&quot;)      #end 使打印完字符串后不换行，停留在当前位置</span><br><span class="line">    time.sleep(0.1)</span><br></pre></td></tr></table></figure><h2 id="文本进度条实例完整效果"><a href="#文本进度条实例完整效果" class="headerlink" title="文本进度条实例完整效果"></a>文本进度条实例完整效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#TextProBarV3.py</span><br><span class="line">import time</span><br><span class="line">scale = 50</span><br><span class="line">print(&quot;执行开始&quot;.center(scale//2,&quot;-&quot;))      #字符串函数   </span><br><span class="line">start = time.perf_counter()</span><br><span class="line">for i in range(scale+1):</span><br><span class="line">    a = &apos;*&apos; * i</span><br><span class="line">    b = &apos;.&apos; * (scale - i)</span><br><span class="line">    c = (i/scale)*100</span><br><span class="line">    dur = time.perf_counter() - start</span><br><span class="line">    print(&quot;\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;.format(c,a,b,dur),end=&apos;&apos;)</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">print(&quot;\n&quot;+&quot;执行结束&quot;.center(scale//2,&apos;-&apos;))</span><br></pre></td></tr></table></figure><h2 id="文本进度条问题举一反三："><a href="#文本进度条问题举一反三：" class="headerlink" title="文本进度条问题举一反三："></a>文本进度条问题举一反三：</h2><p>-文本进度条程序使用了perf_counter()计时<br>-计时方法适合各类需要统计时间的计算问题<br>-例如：比较不同算法时间、统计部分程序运行时间</p><p>进度条拓展：<br>-在任何运行时间较长的程序中增加进度条<br>-在任何希望提高用户体验的应用中增加进度条<br>-进度条是人机交互的纽带之一</p><p>文本进度条的不同设计函数<br>——开始慢后来快体验会更好</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;第五节，应用Python time库来实现文本进度条&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基本数据类型（四）</title>
    <link href="http://yoursite.com/2018/10/09/Python-3-4/"/>
    <id>http://yoursite.com/2018/10/09/Python-3-4/</id>
    <published>2018-10-09T10:28:24.000Z</published>
    <updated>2018-10-09T10:41:16.026Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>第四节time库的使用</em></p></blockquote><a id="more"></a><h1 id="time库的使用"><a href="#time库的使用" class="headerlink" title="time库的使用"></a>time库的使用</h1><hr><h2 id="time库简介"><a href="#time库简介" class="headerlink" title="time库简介"></a>time库简介</h2><pre><code>time库是Python中处理时间的标准库</code></pre><p>-计算机时间的表达<br>-提供获取系统时间并格式化输出功能<br>-提供系统级精确计时功能，用于程序性能分析</p><p>包含三种函数：<br>-时间获取：time()、ctime()、gmtime()<br>-时间格式化：strftime()、strptime()<br>-程序计时：sleep()、perf_counter()</p><h2 id="时间获取"><a href="#时间获取" class="headerlink" title="时间获取"></a>时间获取</h2><p>函数:</p><p>time()<br>–获取当前时间戳，即计算机内部时间值，浮点数<br>time.time()<br>–表示从1970年1月1日零点开始到现在以秒为单位的时间值</p><p>ctime()<br>–获取当前时间并以易读的方式表示，返回字符串<br>time.ctime()<br>–获取人类易读时间的最简单函数</p><p>gmtime()<br>–获取当前时间，表示为计算机可处理的时间格式<br>time.gmtime()</p><h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><h3 id="将时间以合理的方式展示出来"><a href="#将时间以合理的方式展示出来" class="headerlink" title="将时间以合理的方式展示出来"></a>将时间以合理的方式展示出来</h3><p>-格式化：类似字符串格式化，需要有展示模板<br>-展示模板由特定的格式化控制符组成<br>-strftime()方法</p><h3 id="将时间字符串转化为时间变量"><a href="#将时间字符串转化为时间变量" class="headerlink" title="将时间字符串转化为时间变量"></a>将时间字符串转化为时间变量</h3><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = time.gmtime()</span><br><span class="line">time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,t)</span><br><span class="line">timeStr = &apos;2018-01-26 12:55:20&apos;</span><br><span class="line">time.strptime(timeStr,&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="程序计时应用"><a href="#程序计时应用" class="headerlink" title="程序计时应用"></a>程序计时应用</h3><p>-程序计时指测量起止动作所经历时间的过程<br>-测量时间：perf_counter()      ——精准<br>-产生时间：sleep()</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;第四节time库的使用&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>最近的自己</title>
    <link href="http://yoursite.com/2018/10/09/future-leaning/"/>
    <id>http://yoursite.com/2018/10/09/future-leaning/</id>
    <published>2018-10-09T10:14:19.000Z</published>
    <updated>2018-10-09T10:25:44.053Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>最近有点迷茫…</em></p></blockquote><a id="more"></a><h1 id="思考未来的学习"><a href="#思考未来的学习" class="headerlink" title="思考未来的学习"></a>思考未来的学习</h1><hr><p>感觉最近的学习有点找不到方向，思考了一下，可能是太过于急躁了。看到身边有很多优秀的人，看到了自己和他们的差距。<br>现在自己的问题感觉还是基础知识不够扎实，还是要踏踏实实地学好基础知识，再去更加深入的学习。切忌急功近利，切忌。<br>最近还是先认真的学习一下C++和python。之后开始学习html和php之类，再去刷一下ctf的web题。加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;最近有点迷茫…&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="总结与反思" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93%E4%B8%8E%E5%8F%8D%E6%80%9D/"/>
    
    
      <category term="日常总结" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>链表的各种操作</title>
    <link href="http://yoursite.com/2018/10/08/C-Linkedlist/"/>
    <id>http://yoursite.com/2018/10/08/C-Linkedlist/</id>
    <published>2018-10-08T11:10:06.000Z</published>
    <updated>2018-10-08T16:15:46.593Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>最近学数据结构，做了一个链表的porject，用C实现的。<br>感觉是对C语言的一个复习吧。记录一下，加深自己的熟悉程度。</em></p></blockquote><a id="more"></a><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><hr><h2 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h2><p>project的要求就是写六个函数：<br>1.create函数：根据数组创建链表<br>2.locate函数：输入想寻找第i个结点，返回这个结点的地址，若找不到，则返回NULL。<br>3.max函数：在链表中寻找数据最大的结点。<br>4.reverse函数：将链表逆序。<br>5.tidyup函数：将有序链表的多余重复结点删除。<br>6.mergelists函数：合并两个链表，并按非递减顺序排列。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="一个结点-node"><a href="#一个结点-node" class="headerlink" title="一个结点(node)"></a>一个结点(node)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct link&#123;</span><br><span class="line">int data;</span><br><span class="line">struct link *next;</span><br><span class="line">&#125;Link;</span><br></pre></td></tr></table></figure><p><em>链表是由一个个结点用指针连接起来组成的，结点是组成链表的基本单位。</em><br><em>对于单向链表而言，一个结点包含一个元素和一个指向下一个结点的指针。</em><br><em>用C实现可以利用结构体定义一个结点。</em><br><em>如果想用C++实现，可以利用类和模板进行定义。</em></p><h3 id="head、tail、curr指针"><a href="#head、tail、curr指针" class="headerlink" title="head、tail、curr指针"></a>head、tail、curr指针</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct list&#123;</span><br><span class="line">Link *head;</span><br><span class="line">Link *tail;</span><br><span class="line">int len;</span><br><span class="line">&#125;List;</span><br></pre></td></tr></table></figure><p><em>对于一个有头结点的单项链表而言，需要定义一个头结点，头结点不存放元素。</em><br><em>头结点的作用就是使我们能够找到这个链表。</em><br><em>此外，还定义了一个tail指针，tail指针指向链表的最后一个元素，方便在链表的最后插入结点。</em><br><em>在具体的函数实现中，有时可能会用到额外的一个指针，姑且称之为curr指针，它可以用来遍历链表。<br>也可以用来指向当前的结点的上一个结点，以便我们在当前节点插入新的结点。<br>在这里我用了一个结构体，将head指针和tail指针以及len放入其中，目的是可以作为函数的参数，<br>方便我们调用，而且这也是一种安全的编程思路。</em></p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><h3 id="1-create函数"><a href="#1-create函数" class="headerlink" title="1.create函数"></a>1.create函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void create(List* plist,int *array,int arrlen)</span><br><span class="line">&#123;</span><br><span class="line">plist-&gt;head = (Link*)malloc(sizeof(Link));    //创建一个头结点，并且为之分配内存</span><br><span class="line">plist-&gt;tail = plist-&gt;head;</span><br><span class="line">int i;</span><br><span class="line">for(i=0; i&lt;arrlen; i++)</span><br><span class="line">&#123;</span><br><span class="line">Link *a = (Link*)malloc(sizeof(Link));    //创建结点</span><br><span class="line">a-&gt;data = array[i];                       //将数组中的元素填入结点中</span><br><span class="line">a-&gt;next = NULL;</span><br><span class="line">plist-&gt;tail-&gt;next = a;                    //将结点连接到最后一个结点之后</span><br><span class="line">plist-&gt;tail = plist-&gt;tail-&gt;next;          //将tail指针往后移动</span><br><span class="line">plist-&gt;len = plist-&gt;len + 1;              //每连接一个结点，将链表的长度加1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-locate函数"><a href="#2-locate函数" class="headerlink" title="2.locate函数"></a>2.locate函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Link* locate(List* plist)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;-------------------- 定位结点所在的地址: --------------------\n\n&quot;);</span><br><span class="line">int i,j;</span><br><span class="line">Link *p;</span><br><span class="line"></span><br><span class="line">printf(&quot;请输入你想寻找第几个结点：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;i);</span><br><span class="line">getchar();</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">//遍历链表（利用curr指针遍历），寻找是否存在第i个结点</span><br><span class="line">//注意第一个有元素结点是是首元结点（第一个结点）</span><br><span class="line">//return用法：出现return立刻退出函数，并返回return后的元素</span><br><span class="line"></span><br><span class="line">for(p = plist-&gt;head-&gt;next,j = 1; p ;p = p-&gt;next,j++)</span><br><span class="line">&#123;</span><br><span class="line">if(j == i)</span><br><span class="line">&#123;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-max函数"><a href="#3-max函数" class="headerlink" title="3.max函数"></a>3.max函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">int max(List* plist,int* isfind)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;----------------- 确定链表中的值最大的结点: -----------------\n\n&quot;);</span><br><span class="line">int j;</span><br><span class="line">int i = 0;</span><br><span class="line">int maxnode[10];                           //用来记录最大值所对应的结点</span><br><span class="line">int maximum = plist-&gt;head-&gt;next-&gt;data;    </span><br><span class="line"></span><br><span class="line">Link *p = plist-&gt;head-&gt;next;</span><br><span class="line"></span><br><span class="line">if(p == NULL)&#123;                             //判断是否为空链表</span><br><span class="line">isfind = 0;</span><br><span class="line">printf(&quot;链表为空\n&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">//遍历链表，找最大值</span><br><span class="line">for(p = plist-&gt;head-&gt;next,j = 1; p ;p = p-&gt;next,j++)&#123;</span><br><span class="line">if(maximum &lt; p-&gt;data)&#123;</span><br><span class="line">maximum = p-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//根据最大值，找所有取到最大值的结点</span><br><span class="line">for(p = plist-&gt;head-&gt;next,j = 1; p ;p = p-&gt;next,j++)&#123;</span><br><span class="line">if(maximum == p-&gt;data)&#123;</span><br><span class="line">maxnode[i] = j;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//将所有取到最大值的结点输出</span><br><span class="line">printf(&quot;所有取到最大值的结点为：&quot;);</span><br><span class="line">for(j = 0; j&lt;i; j++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d &quot;,maxnode[j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">return maximum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-reverse函数"><a href="#4-reverse函数" class="headerlink" title="4.reverse函数"></a>4.reverse函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">void reverse(List* prelist,List* plist)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;-------------------- 倒置链表元素的顺序: --------------------\n\n&quot;);</span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line">Link *p,*q;</span><br><span class="line"></span><br><span class="line">for(i = 1; i &lt;= plist-&gt;len; i++)</span><br><span class="line">&#123;</span><br><span class="line">//每次遍历链表找到最后两个结点</span><br><span class="line">p = plist-&gt;head-&gt;next;</span><br><span class="line">q = plist-&gt;head-&gt;next;</span><br><span class="line"></span><br><span class="line">while(p-&gt;next != NULL)</span><br><span class="line">&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//第一次的遍历时，创建一个新的头结点，并与最后一个结点相连</span><br><span class="line">if(i == 1)&#123;</span><br><span class="line">prelist-&gt;head = (Link*)malloc(sizeof(Link));</span><br><span class="line">prelist-&gt;tail = p;</span><br><span class="line">prelist-&gt;head-&gt;next = p;</span><br><span class="line">q-&gt;next = NULL;  //断开倒数第二个结点和最后一个结点的连接</span><br><span class="line">//之后每次都把新的结点插入到最后，并把原链表的倒数第二个结点和最后一个结点的连接断开</span><br><span class="line">&#125;else&#123; </span><br><span class="line">prelist-&gt;tail-&gt;next = p;</span><br><span class="line">prelist-&gt;tail = p;</span><br><span class="line">q-&gt;next = NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>还有另外一种较简便的方法以后补充</em></p><h3 id="5-tidyup函数"><a href="#5-tidyup函数" class="headerlink" title="5.tidyup函数"></a>5.tidyup函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">void tidyup(List* plist)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;------------------- 删除值相同的多余结点: -------------------\n\n&quot;);</span><br><span class="line">Link *p,*q,*r;</span><br><span class="line"></span><br><span class="line">p = plist-&gt;head-&gt;next;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line"></span><br><span class="line">/*因为链表是有序的 每次比较相邻两个结点，如果值相同，则释放掉后面的结点</span><br><span class="line">并把q指针往后移，p指针保持不变，与后面的一个结点连接后继续比较*/</span><br><span class="line">/*当值不相同时，两个指针同时向后移动*/</span><br><span class="line">while(p-&gt;next != NULL)</span><br><span class="line">&#123;</span><br><span class="line">if(p-&gt;data == q-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">r = q;</span><br><span class="line">free(r);</span><br><span class="line">q = p-&gt;next;</span><br><span class="line">plist-&gt;len = plist-&gt;len - 1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">p = q;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-mergelists函数"><a href="#6-mergelists函数" class="headerlink" title="6.mergelists函数"></a>6.mergelists函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">void mergelists(List* plist1, List *plist2, List *plist3)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;----------------------- 合并两个链表: -----------------------\n\n&quot;);</span><br><span class="line">Link *cur = NULL;</span><br><span class="line">Link *p = plist1-&gt;head;</span><br><span class="line">Link *q = plist2-&gt;head;</span><br><span class="line"></span><br><span class="line">//如果两个链表中有空链表，合并的链表就是另一个链表本身</span><br><span class="line">if(NULL == p-&gt;next)&#123;</span><br><span class="line">plist3-&gt;head = q;</span><br><span class="line">&#125;else if(NULL == q-&gt;next)&#123;</span><br><span class="line">plist3-&gt;head = p;</span><br><span class="line">&#125;</span><br><span class="line">//判断哪一个链表的首元结点值更小，合并的链表的头结点就为那个链表的头结点</span><br><span class="line">if(p-&gt;next-&gt;data &lt;= q-&gt;next-&gt;data)&#123;</span><br><span class="line">plist3-&gt;head = p;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">plist3-&gt;head = q;</span><br><span class="line">&#125;</span><br><span class="line">//p,q指针分别移动到两个链表的首元结点上，cur在合并链表的头结点</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">cur = plist3-&gt;head;</span><br><span class="line"></span><br><span class="line">//从首元开始遍历，元素小的连接在plist3后面，然后向后移动对应链表的指针，继续比较</span><br><span class="line">while(p != NULL &amp;&amp; q != NULL)</span><br><span class="line">&#123;</span><br><span class="line">if(p-&gt;data &lt;= q-&gt;data)&#123;</span><br><span class="line">cur-&gt;next = p;</span><br><span class="line">cur = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">cur-&gt;next = q;</span><br><span class="line">cur = q;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">如果两个链表还没有连接完的，就把剩下的结点直接连接在plist3后面</span><br><span class="line">while(p != NULL)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next = p;</span><br><span class="line">cur = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while(q != NULL)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next = q;</span><br><span class="line">cur = q;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">//计算plist3长度，为两链表长度之和</span><br><span class="line">plist3-&gt;len = plist1-&gt;len + plist2-&gt;len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct link&#123;</span><br><span class="line">int data;</span><br><span class="line">struct link *next;</span><br><span class="line">&#125;Link;</span><br><span class="line"></span><br><span class="line">typedef struct list&#123;</span><br><span class="line">Link *head;</span><br><span class="line">Link *tail;</span><br><span class="line">int len;</span><br><span class="line">&#125;List;</span><br><span class="line"></span><br><span class="line">void create(List* plist,int* array,int arrlen);</span><br><span class="line">Link* locate(List* plist);</span><br><span class="line">int max(List* plist,int* isfind);</span><br><span class="line">void reverse(List* prelist,List* plist);</span><br><span class="line">void tidyup(List* plist);</span><br><span class="line">void mergelists(List* plist1,List* plist2,List *plist3);</span><br><span class="line"></span><br><span class="line">void create(List* plist,int *array,int arrlen)</span><br><span class="line">&#123;</span><br><span class="line">plist-&gt;head = (Link*)malloc(sizeof(Link));</span><br><span class="line">plist-&gt;tail = plist-&gt;head;</span><br><span class="line">int i;</span><br><span class="line">for(i=0; i&lt;arrlen; i++)</span><br><span class="line">&#123;</span><br><span class="line">Link *a = (Link*)malloc(sizeof(Link));</span><br><span class="line">a-&gt;data = array[i];</span><br><span class="line">a-&gt;next = NULL;</span><br><span class="line">plist-&gt;tail-&gt;next = a;</span><br><span class="line">plist-&gt;tail = plist-&gt;tail-&gt;next;</span><br><span class="line">plist-&gt;len = plist-&gt;len + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Link* locate(List* plist)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;-------------------- 定位结点所在的地址: --------------------\n\n&quot;);</span><br><span class="line">int i,j;</span><br><span class="line">Link *p;</span><br><span class="line"></span><br><span class="line">printf(&quot;请输入你想寻找第几个结点：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;i);</span><br><span class="line">getchar();</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">for(p = plist-&gt;head-&gt;next,j = 1; p ;p = p-&gt;next,j++)</span><br><span class="line">&#123;</span><br><span class="line">if(j == i)</span><br><span class="line">&#123;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int max(List* plist,int* isfind)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;----------------- 确定链表中的值最大的结点: -----------------\n\n&quot;);</span><br><span class="line">int j;</span><br><span class="line">int i = 0;</span><br><span class="line">int maxnode[10];</span><br><span class="line">int maximum = plist-&gt;head-&gt;next-&gt;data;</span><br><span class="line"></span><br><span class="line">Link *p = plist-&gt;head-&gt;next;</span><br><span class="line"></span><br><span class="line">if(p == NULL)&#123;</span><br><span class="line">isfind = 0;</span><br><span class="line">printf(&quot;链表为空\n&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(p = plist-&gt;head-&gt;next,j = 1; p ;p = p-&gt;next,j++)&#123;</span><br><span class="line">if(maximum &lt; p-&gt;data)&#123;</span><br><span class="line">maximum = p-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(p = plist-&gt;head-&gt;next,j = 1; p ;p = p-&gt;next,j++)&#123;</span><br><span class="line">if(maximum == p-&gt;data)&#123;</span><br><span class="line">maxnode[i] = j;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;所有取到最大值的结点为：&quot;);</span><br><span class="line">for(j = 0; j&lt;i; j++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d &quot;,maxnode[j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">return maximum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void reverse(List* prelist,List* plist)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;-------------------- 倒置链表元素的顺序: --------------------\n\n&quot;);</span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line">Link *p,*q;</span><br><span class="line"></span><br><span class="line">for(i = 1; i &lt;= plist-&gt;len; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = plist-&gt;head-&gt;next;</span><br><span class="line">q = plist-&gt;head-&gt;next;</span><br><span class="line"></span><br><span class="line">while(p-&gt;next != NULL)</span><br><span class="line">&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(i == 1)&#123;</span><br><span class="line">prelist-&gt;head = (Link*)malloc(sizeof(Link));</span><br><span class="line">prelist-&gt;tail = p;</span><br><span class="line">prelist-&gt;head-&gt;next = p;</span><br><span class="line">q-&gt;next = NULL;</span><br><span class="line">&#125;else&#123; </span><br><span class="line">prelist-&gt;tail-&gt;next = p;</span><br><span class="line">prelist-&gt;tail = p;</span><br><span class="line">q-&gt;next = NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void tidyup(List* plist)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;------------------- 删除值相同的多余结点: -------------------\n\n&quot;);</span><br><span class="line">Link *p,*q,*r;</span><br><span class="line"></span><br><span class="line">p = plist-&gt;head-&gt;next;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while(p-&gt;next != NULL)</span><br><span class="line">&#123;</span><br><span class="line">if(p-&gt;data == q-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">r = q;</span><br><span class="line">free(r);</span><br><span class="line">q = p-&gt;next;</span><br><span class="line">plist-&gt;len = plist-&gt;len - 1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">p = q;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void mergelists(List* plist1, List *plist2, List *plist3)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;----------------------- 合并两个链表: -----------------------\n\n&quot;);</span><br><span class="line">Link *cur = NULL;</span><br><span class="line">Link *p = plist1-&gt;head;</span><br><span class="line">Link *q = plist2-&gt;head;</span><br><span class="line"></span><br><span class="line">if(NULL == p-&gt;next)&#123;</span><br><span class="line">plist3-&gt;head = q;</span><br><span class="line">&#125;else if(NULL == q-&gt;next)&#123;</span><br><span class="line">plist3-&gt;head = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(p-&gt;next-&gt;data &lt;= q-&gt;next-&gt;data)&#123;</span><br><span class="line">plist3-&gt;head = p;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">plist3-&gt;head = q;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">cur = plist3-&gt;head;</span><br><span class="line"></span><br><span class="line">while(p != NULL &amp;&amp; q != NULL)</span><br><span class="line">&#123;</span><br><span class="line">if(p-&gt;data &lt;= q-&gt;data)&#123;</span><br><span class="line">cur-&gt;next = p;</span><br><span class="line">cur = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">cur-&gt;next = q;</span><br><span class="line">cur = q;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while(p != NULL)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next = p;</span><br><span class="line">cur = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while(q != NULL)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next = q;</span><br><span class="line">cur = q;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plist3-&gt;len = plist1-&gt;len + plist2-&gt;len;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line"> &#123;</span><br><span class="line"> int a[] = &#123;5,5,5,7,9,16,27,27,38,41&#125;;</span><br><span class="line"> int m[] = &#123;1,5,6,8,8,10,28,49,50,51&#125;;</span><br><span class="line">int n[] = &#123;2,4,7,10,12,14,18,24,29,30&#125;;</span><br><span class="line"> int lena = sizeof(a)/sizeof(int),lenm = sizeof(m)/sizeof(int),lenn = sizeof(n)/sizeof(int);</span><br><span class="line">int x,maximum,isfind = 1;</span><br><span class="line"></span><br><span class="line">Link *p;</span><br><span class="line"> </span><br><span class="line">List list,listm,listn,relist,medlist,tidylist,mergelist;</span><br><span class="line"></span><br><span class="line"> list.len = relist.len = tidylist.len = listm.len = listn.len = 0;</span><br><span class="line"></span><br><span class="line">start: printf(&quot;----------------- 请选择想对链表进行的操作: -----------------\n&quot;);</span><br><span class="line"> printf(&quot;     1.定位结点所在的地址       2.确定链表中的值最大的结点\n     3.倒置链表元素的顺序       4.删除值相同的多余结点\n     5.合并两个链表             6.退出\n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">getchar();</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">if(x == 1||x == 2||x == 3||x == 4)&#123;</span><br><span class="line">create(&amp;list,a,lena);</span><br><span class="line">printf(&quot;---------------- 已经根据数组创建了以下链表: ----------------\n\n&quot;);</span><br><span class="line">printf(&quot;list:\n&quot;);</span><br><span class="line">for(p = list.head-&gt;next; p; p = p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d   &quot;,p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n\n&quot;);</span><br><span class="line">&#125;else if (x == 5)&#123;</span><br><span class="line">create(&amp;listm,m,lenm);</span><br><span class="line">create(&amp;listn,n,lenn);</span><br><span class="line"></span><br><span class="line">printf(&quot;---------------- 已经根据数组创建了以下链表: ----------------\n\n&quot;);</span><br><span class="line">printf(&quot;listm:\n&quot;);</span><br><span class="line">for(p = listm.head-&gt;next; p; p = p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d   &quot;,p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;listn:\n&quot;);</span><br><span class="line">for(p = listn.head-&gt;next; p; p = p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d   &quot;,p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> switch(x)</span><br><span class="line">&#123;</span><br><span class="line">case 1: </span><br><span class="line">p = locate(&amp;list);</span><br><span class="line">if(p != NULL)&#123;</span><br><span class="line">printf(&quot;该结点的地址为：%#X\n\n&quot;,p);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">printf(&quot;未找到该结点\n\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">goto start;</span><br><span class="line"></span><br><span class="line">case 2:</span><br><span class="line">maximum = max(&amp;list,&amp;isfind);</span><br><span class="line"></span><br><span class="line">if(isfind)&#123;</span><br><span class="line">printf(&quot;最大值是%d\n\n&quot;,maximum);</span><br><span class="line">&#125;</span><br><span class="line">goto start;</span><br><span class="line"></span><br><span class="line">case 3:</span><br><span class="line">create(&amp;medlist,a,lena);</span><br><span class="line">reverse(&amp;relist,&amp;medlist);</span><br><span class="line">printf(&quot;元素倒置后的链表为relist:\n&quot;);</span><br><span class="line">for(p = relist.head-&gt;next; p; p = p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d   &quot;,p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n\n&quot;);</span><br><span class="line">goto start;</span><br><span class="line"></span><br><span class="line">case 4:</span><br><span class="line">create(&amp;tidylist,a,lena);</span><br><span class="line">tidyup(&amp;tidylist);</span><br><span class="line">printf(&quot;删除值相同的多余结点后的链表为tidylist:\n&quot;);</span><br><span class="line">for(p = tidylist.head-&gt;next; p; p = p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d   &quot;,p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n\n&quot;);</span><br><span class="line">goto start;</span><br><span class="line"></span><br><span class="line">case 5:</span><br><span class="line">mergelists(&amp;listm, &amp;listn, &amp;mergelist);</span><br><span class="line">printf(&quot;合并后的链表为mergelist:\n&quot;);</span><br><span class="line">for(p = mergelist.head-&gt;next; p; p = p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d   &quot;,p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n\n&quot;);</span><br><span class="line">goto start;</span><br><span class="line">case 6:</span><br><span class="line">printf(&quot;---------------------- 谢谢使用，再见! ----------------------\n\n&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">goto start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;最近学数据结构，做了一个链表的porject，用C实现的。&lt;br&gt;感觉是对C语言的一个复习吧。记录一下，加深自己的熟悉程度。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构、C" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81C/"/>
    
  </entry>
  
  <entry>
    <title>Python基本数据类型（三）</title>
    <link href="http://yoursite.com/2018/09/24/Python-3-3/"/>
    <id>http://yoursite.com/2018/09/24/Python-3-3/</id>
    <published>2018-09-24T15:18:52.000Z</published>
    <updated>2018-09-30T01:14:50.937Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>第三节是字符串类型及操作，加快进度了。<br>…</em></p></blockquote><a id="more"></a><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><hr><pre><code>字符串：由0个或多个字符组成的有序字符序列。</code></pre><p>-字符串由一对单引号或一对双引号表示<br> 例：”请输入带有符号的温度值：” 或者 ‘C’<br>-字符串是带有字符的有序序列，可以对其中的字符进行索引<br> 例：’请’是上面字符串的第0个字符</p><h2 id="字符串的两类共四种表示方法"><a href="#字符串的两类共四种表示方法" class="headerlink" title="字符串的两类共四种表示方法"></a>字符串的两类共四种表示方法</h2><p>1.由一对单引号或双引号表示，仅表示单行字符串<br>  例：”请输入带有符号的温度值：” 或者 ‘C’<br>2.由一对三单引号或三双引号表示，可表示多行字符串<br>  例：’’’Python<br>                         语言’’’</p><p>注：三单引号形成字符串，注释是其使用方法之一<br>    字符串中使用单引号，外面就用双引号<br>    字符串中使用双引号，外面就用单引号<br>    字符串中既有单引号又有双引号，外面就用三单引号</p><h2 id="字符串的序号"><a href="#字符串的序号" class="headerlink" title="字符串的序号"></a>字符串的序号</h2><ul><li>正向递增序号</li><li>反向递减序号</li></ul><h1 id="字符串的操作"><a href="#字符串的操作" class="headerlink" title="字符串的操作"></a>字符串的操作</h1><hr><h2 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h2><ul><li>索引：返回字符串中的单个字符  ———— &lt;字符串&gt;[M]</li><li>切片：返回字符串中的一段字符子串  ———— &lt;字符串&gt;[M:N]<pre><code>字符串切片的高级用法：  * 使用[M:N:K]根据步长对字符串切片  * &lt;字符串&gt;[M:N],M缺失表示至开头，N缺失表示至结尾  * &lt;字符串&gt;[M:N:K],根据步长K对字符串切片特殊用法[::-1]将字符串逆序</code></pre></li></ul><h2 id="字符串的特殊字符"><a href="#字符串的特殊字符" class="headerlink" title="字符串的特殊字符"></a>字符串的特殊字符</h2><pre><code>转义符 \</code></pre><ul><li>转义符表示特殊字符的本意<br>例：\”    表示字符串中的出现“</li><li>转义符形成一些组合，表示一些不可打印的含义<br>例：”\b”回退，”\n”换行（光标移动到下行首）”\r”回车（光标移动到本行首）</li></ul><h2 id="字符串的操作符"><a href="#字符串的操作符" class="headerlink" title="字符串的操作符"></a>字符串的操作符</h2><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">x + y</td><td style="text-align:left">连接两个字符串x和y</td></tr><tr><td style="text-align:center">n * x 或 x * n</td><td style="text-align:left">复制n次字符串x</td></tr><tr><td style="text-align:center">x in s</td><td style="text-align:left">如果x是s的字串，返回True,否则返回False</td></tr></tbody></table><p> 例：获取星期字符串<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. #WeekNamePrintV1.py</span><br><span class="line">    weekStr = &quot;星期一星期二星期三星期四星期五星期六星期日&quot;</span><br><span class="line">    weekId  = eval(input(&quot;请输入星期数字（1-7）:&quot;))</span><br><span class="line">    pos = (weekId - 1) * 3</span><br><span class="line">    print(weekStr[pos:pos+3])</span><br></pre></td></tr></table></figure></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2. #WeekNamePrintV2.py</span><br><span class="line">    weekStr = &quot;一二三四五六日&quot;</span><br><span class="line">    weekId = eval(input(&quot;请输入星期数字（1-7）:&quot;))</span><br><span class="line">    print(&quot;星期&quot; + weekStr[weekId-1] )</span><br></pre></td></tr></table></figure><h2 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h2><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">len(x)</td><td style="text-align:left">长度，返回字符串x的长度</td></tr><tr><td style="text-align:center">str(x)</td><td style="text-align:left">任何类型x所对应的字符串形式 例：str(1.23)结果为”1.23”，str([1,2])结果为”[1,2]”</td></tr><tr><td style="text-align:center">eval(x)</td><td style="text-align:left">与eval(x)做了相反的工作，是一对函数</td></tr><tr><td style="text-align:center">repr(x)</td><td style="text-align:left">返回一个对象的string格式</td></tr><tr><td style="text-align:center">hex(x)或eval()</td><td style="text-align:left">整数x的十六进制或八进制小写形式字符串</td></tr><tr><td style="text-align:center">chr(u)</td><td style="text-align:left">x为Unicode编码，返回其对应的字符</td></tr><tr><td style="text-align:center">ord(x)</td><td style="text-align:left">x为字符，返回其对应的Unicode编码</td></tr></tbody></table><p> <em>注：Unicode编码：Python字符串中的每个字符都是Unicode编码</em></p><h2 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="字符串处理方法"></a>字符串处理方法</h2><ul><li>”方法“特指&lt;a>.&lt;b>()风格中的函数&lt;b>()</li><li>方法本身也是函数，但与&lt;a>有关，&lt;a>.&lt;b>()风格使用</li><li><p>字符串及变量也是&lt;a>,存在一些方法</p><p><em>方法面向对象</em></p><p><strong>一些方法形式提供的字符串处理功能</strong></p></li></ul><table><thead><tr><th style="text-align:center">方法及使用</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">str.lower()或str.upper()</td><td style="text-align:left">返回字符串的副本，全部字符小写/大写</td></tr><tr><td style="text-align:center">str.split(sep=None)</td><td style="text-align:left">返回一个列表，由str根据sep被分隔的部分组成</td></tr><tr><td style="text-align:center">str.count(sub)</td><td style="text-align:left">返回字串sub在str中出现的次数</td></tr><tr><td style="text-align:center">str.replace(old,new)</td><td style="text-align:left">返回字符串str副本，所有old字串被替换为new</td></tr><tr><td style="text-align:center">str.center(width[,fillchar])</td><td style="text-align:left">字符串str根据宽度width居中，fillchar可选</td></tr><tr><td style="text-align:center">str.strip(chars)</td><td style="text-align:left">从str中去掉在其左侧和右侧chars中列出的字符</td></tr><tr><td style="text-align:center">str.join(iter)</td><td style="text-align:left">在iter变量出最后元素外的每个元素增加一个str</td></tr></tbody></table><h2 id="字符串类型的格式化"><a href="#字符串类型的格式化" class="headerlink" title="字符串类型的格式化"></a>字符串类型的格式化</h2><p> -格式化是对字符串进行格式表达的方式<br> -字符串格式化使用.format()方法，用法如下：<br> &lt;模板字符串&gt;.format()<br> 槽{ }</p><p> <strong>format()中参数的顺序和槽{}的顺序默认一一对应<br>   可以在槽中指定需要添加参数的位置</strong></p><h3 id="format-方法的格式控制"><a href="#format-方法的格式控制" class="headerlink" title="format()方法的格式控制"></a>format()方法的格式控制</h3><table><thead><tr><th>:</th><th>&lt;填充&gt;</th><th>&lt;对齐&gt;</th><th>&lt;宽度&gt;</th><th>&lt;,&gt;</th><th>&lt;.精度&gt;</th><th>&lt;类型&gt;</th></tr></thead><tbody><tr><td>引导符号</td><td>用于填充单个字符</td><td>&lt;左对齐  &gt;右对齐  ^居中对齐</td><td>槽设定的输出宽度</td><td>数字的千分位分隔符</td><td>浮点数小数精度或字符串最大输出长度</td><td>整数类型b,c,d,o,x,X（十六进制中字母大写）   浮点数类型e,E,f,%</td></tr></tbody></table><p>  例：</p><p> format()方法的格式控制<br>  <code>&quot;{0:=^20}&quot;.format(&quot;PYTHON&quot;)</code><br>  :  ————引导符<br>  =  ————填充符号 填充=<br>  ^  ————居中对齐<br>  20  ———宽度</p><p><em>省略填充对齐直接给出宽度<br>默认填充为空格<br>变量左对齐</em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;第三节是字符串类型及操作，加快进度了。&lt;br&gt;…&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基本数据类型（二）</title>
    <link href="http://yoursite.com/2018/09/24/Python-3-2/"/>
    <id>http://yoursite.com/2018/09/24/Python-3-2/</id>
    <published>2018-09-24T04:39:08.000Z</published>
    <updated>2018-09-24T05:03:41.584Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>今天是中秋节，继续整理一下笔记吧。最近任务比较多，博客就慢慢更吧。<br>第三章第二节来通过一个实例来展示数字类型的具体应用，同时也让我知道努力学习的重要性。</em></p></blockquote><a id="more"></a><h1 id="实例3：天天向上的力量"><a href="#实例3：天天向上的力量" class="headerlink" title="实例3：天天向上的力量"></a>实例3：天天向上的力量</h1><hr><h2 id="1-。的力量"><a href="#1-。的力量" class="headerlink" title="1%。的力量"></a>1%。的力量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#DayDayUpQ1.py</span><br><span class="line">dayup = pow(1.001,365)</span><br><span class="line">daydown = pow(0.999,365)</span><br><span class="line">print(&quot;向上：&#123;:.2f&#125;，向下：&#123;:.2f&#125;&quot;.format(dayup,daydown))</span><br></pre></td></tr></table></figure><p><em>结果：向上：1.44，向下：0.69</em></p><h2 id="5-。和1-的力量"><a href="#5-。和1-的力量" class="headerlink" title="5%。和1%的力量"></a>5%。和1%的力量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#DayDayUpQ2.py</span><br><span class="line">dayup = pow(1.001,365)</span><br><span class="line">dayfactor = 0.005</span><br><span class="line">dayup = pow(1+dayfactor,365)</span><br><span class="line">daydown = pow(1-dayfactor,365)</span><br><span class="line">print(&quot;向上：&#123;:.2f&#125;,向下：&#123;:.2f&#125;&quot;.format(dayup,daydown))</span><br></pre></td></tr></table></figure><p><em>5%。结果：向上：6.17，向下：0.16<br>1%结果：向上37.78，向下：0.03</em></p><h2 id="工作日努力，双休日休息"><a href="#工作日努力，双休日休息" class="headerlink" title="工作日努力，双休日休息"></a>工作日努力，双休日休息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#DayDayUpQ3.py</span><br><span class="line">dayup = 1.0</span><br><span class="line">dayfactor = 0.01</span><br><span class="line">for i in range(365):</span><br><span class="line">    if i % 7 in [6,0]:</span><br><span class="line">        dayup = dayup*(1-dayfactor)</span><br><span class="line">    else:</span><br><span class="line">        dayup = dayup*(1+dayfactor)</span><br><span class="line">print(&quot;工作日的力量：&#123;:.2f&#125;&quot;.format(dayup))</span><br></pre></td></tr></table></figure><p><em>结果：工作日的力量：4.63</em></p><h2 id="工作日的努力弥补"><a href="#工作日的努力弥补" class="headerlink" title="工作日的努力弥补"></a>工作日的努力弥补</h2><p>-工作日努力到什么水平才能与每天努力1%的结果相同呢？<br>（利用def和while）</p><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#DayDayUpQ4.py</span><br><span class="line">def dayUp(df):</span><br><span class="line">    dayup = 1</span><br><span class="line">    for i in range(365):</span><br><span class="line">        if i % 7 in [6,0]:</span><br><span class="line">            dayup = dayup*(1 - 0.01)</span><br><span class="line">        else:</span><br><span class="line">            dayup = dayup*(1 + df)</span><br><span class="line">    return dayup</span><br><span class="line">dayfactor = 0.01</span><br><span class="line">while dayUp(dayfactor) &lt; 37.78:</span><br><span class="line">      dayfactor += 0.001</span><br><span class="line">      print(&quot;工作日的努力参数是:&#123;:.3f&#125;&quot;.format(dayfactor))</span><br></pre></td></tr></table></figure><p><em>结果：工作日的努力参数是：0.019</em></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><ul><li>以上利用def保留字定义，且有参数df的函数可以实现参数不同时的代码共用。</li><li>while是执行循环的保留字<br><em>扩展：for…in… 计算思维、抽象和自动化<br>def…while… 试错</em></li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><strong>GRIT 坚毅——获得成功<br>持之以恒，天天向上的力量很惊人</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;今天是中秋节，继续整理一下笔记吧。最近任务比较多，博客就慢慢更吧。&lt;br&gt;第三章第二节来通过一个实例来展示数字类型的具体应用，同时也让我知道努力学习的重要性。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基本数据类型（一）</title>
    <link href="http://yoursite.com/2018/09/23/Python-3-1/"/>
    <id>http://yoursite.com/2018/09/23/Python-3-1/</id>
    <published>2018-09-23T03:38:55.000Z</published>
    <updated>2018-09-23T04:33:05.973Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>第三章是关于数据类型的内容，涉及数字类型及其操作、列表类型、字符串类型及其操作等。<br>同时穿插实例来应用数据类型。第一节是关于数字类型及其操作的内容。</em></p></blockquote><a id="more"></a><h1 id="数字类型及其操作"><a href="#数字类型及其操作" class="headerlink" title="数字类型及其操作"></a>数字类型及其操作</h1><hr><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>-可正可负<br><code>pow(x,y) #计算x的y次方</code><br>-十进制<br>-二进制 以0b或0B开头<br>-八进制 以0o或0O开头<br>-十六进制 以0x或0X开头</p><h3 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h3><p>浮点数的概念与实数概念一致<br>-带有小数点及小数<br>-浮点数取值范围和小数精度存在限制，但常规计算可忽略<br><em>浮点数间的运算存在不确定尾数，不是bug</em><br>解释：二进制表示小数，可以无限接近，但不完全相同</p><p><code>round(x,d) #对x四舍五入，d是小数截取位数</code><br><em>浮点数间运算及比较用round()函数辅助</em><br>科学记数法:用e或E作为幂的符号</p><h3 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h3><p>如3+4j ————与数学中的复数概念一致<br><code>z.real() #获得实部</code><br><code>z.imag() #获得虚部</code><br><code>abs() #为复数取模</code></p><h2 id="数字类型操作"><a href="#数字类型操作" class="headerlink" title="数字类型操作"></a>数字类型操作</h2><h3 id="数值运算操作符"><a href="#数值运算操作符" class="headerlink" title="数值运算操作符"></a>数值运算操作符</h3><table><thead><tr><th style="text-align:center">操作符及其使用</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">x/y</td><td style="text-align:left">产生浮点数结果</td></tr><tr><td style="text-align:center">x//y</td><td style="text-align:left">产生证书结果</td></tr><tr><td style="text-align:center">+x</td><td style="text-align:left">x本身</td></tr><tr><td style="text-align:center">-y</td><td style="text-align:left">y的负值</td></tr><tr><td style="text-align:center">x%y</td><td style="text-align:left">余数，模运算10%3结果是1</td></tr><tr><td style="text-align:center">x**y</td><td style="text-align:left">幂运算，x的y次幂</td></tr></tbody></table><p>二元操作符(x=x op y)</p><table><thead><tr><th style="text-align:center">增强操作符及其使用</th></tr></thead><tbody><tr><td style="text-align:center">x+=y</td></tr><tr><td style="text-align:center">x-=y</td></tr><tr><td style="text-align:center">x*=y</td></tr><tr><td style="text-align:center">x/=y</td></tr><tr><td style="text-align:center">x//=y</td></tr><tr><td style="text-align:center">x%=y</td></tr><tr><td style="text-align:center">x**=y</td></tr></tbody></table><p><strong>注：类型之间可进行混合运算，生成”最宽的类型“</strong><br>（整数&lt;浮点数&lt;复数）</p><h3 id="数值运算函数"><a href="#数值运算函数" class="headerlink" title="数值运算函数"></a>数值运算函数</h3><table><thead><tr><th style="text-align:center">函数及使用</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">abs(x)</td><td style="text-align:left">x的绝对值</td></tr><tr><td style="text-align:center">divmod(x,y)</td><td style="text-align:left">商余(x//y,x%y)，同时输出商和余数</td></tr><tr><td style="text-align:center">pow(x,y[,z])</td><td style="text-align:left">幂余，(x**y)%z，z可省略</td></tr><tr><td style="text-align:center">round(x[,d])</td><td style="text-align:left">四舍五入，d是保留小数位数，默认为0</td></tr><tr><td style="text-align:center">max(x1,x2,…,xn)</td><td style="text-align:left">最大值，返回x1,x2,…,xn的最大值，n不限</td></tr><tr><td style="text-align:center">min(x1,x2,…,xn)</td><td style="text-align:left">最小值，返回x1,x2,…,xn的最小值，n不限</td></tr><tr><td style="text-align:center">int(x)</td><td style="text-align:left">将x变成整数，舍弃小数部分</td></tr><tr><td style="text-align:center">float(x)</td><td style="text-align:left">将x变成浮点数，增加小数部分 eg. <code>float(&quot;1.23&quot;) #结果为1.23</code></td></tr><tr><td style="text-align:center">complex(x)</td><td style="text-align:left">将x变成复数，增加虚数部分</td></tr></tbody></table><p><strong>注：使用函数input()时，Python将用户输入解读为字符串。<br>可用int()函数，将Python输入视为数值。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;第三章是关于数据类型的内容，涉及数字类型及其操作、列表类型、字符串类型及其操作等。&lt;br&gt;同时穿插实例来应用数据类型。第一节是关于数字类型及其操作的内容。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基本图形绘制</title>
    <link href="http://yoursite.com/2018/09/22/python-2/"/>
    <id>http://yoursite.com/2018/09/22/python-2/</id>
    <published>2018-09-22T12:13:29.000Z</published>
    <updated>2018-10-10T06:31:03.542Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>继续Python笔记的整理，第二章是库的基本用法以及利用turtle库绘图的实例。</em></p></blockquote><a id="more"></a><h1 id="深入理解Python语言"><a href="#深入理解Python语言" class="headerlink" title="深入理解Python语言"></a>深入理解Python语言</h1><hr><h2 id="计算机技术的演进："><a href="#计算机技术的演进：" class="headerlink" title="计算机技术的演进："></a>计算机技术的演进：</h2><p>1.计算机系统结构时代   计算机能力问题<br>2.网络和视窗时代          交互问题<br>3.复杂信息系统时代       数据问题<br>4.人工智能时代           人类问题<br>当前:新计算时代</p><h2 id="编程语言的多样初心："><a href="#编程语言的多样初心：" class="headerlink" title="编程语言的多样初心："></a>编程语言的多样初心：</h2><p>C：<br>指针、内存、数据类型<br>语言本质：理解计算机系统结构<br>解决问题：性能<br>java：<br>面向对象<br>对象、跨平台、运行时<br>…<br>python：<br>理解问题的求解</p><h2 id="python语言的特点："><a href="#python语言的特点：" class="headerlink" title="python语言的特点："></a>python语言的特点：</h2><p><em>通用性</em>强制可读性<br><em>较少的底层语法元素</em>多种编程方式<br>*支持中文字符</p><h2 id="语法简介"><a href="#语法简介" class="headerlink" title="语法简介"></a>语法简介</h2><p>生态高产:python是最高产的程序设计语言<br>工具决定思维</p><h2 id="“超级语言的诞生”"><a href="#“超级语言的诞生”" class="headerlink" title="“超级语言的诞生”"></a>“超级语言的诞生”</h2><p>机器语言、汇编语言——不适合编程<br>高级语言，与CPU无关——适合编程<br>超级语言，庞大的计算生态。python——唯一的超级语言</p><h1 id="实例二：Python蟒蛇绘制"><a href="#实例二：Python蟒蛇绘制" class="headerlink" title="实例二：Python蟒蛇绘制"></a>实例二：Python蟒蛇绘制</h1><hr><p>下面先给出代码，再进行代码分析</p><h2 id="蟒蛇绘制代码"><a href="#蟒蛇绘制代码" class="headerlink" title="蟒蛇绘制代码"></a>蟒蛇绘制代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#PythonDraw.py</span><br><span class="line">import turtle</span><br><span class="line">turtle.setup(650,350,200,200)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.fd(-250)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pensize(25)</span><br><span class="line">turtle.pencolor(&quot;gold&quot;)</span><br><span class="line">turtle.seth(-40)</span><br><span class="line">for i in range(4):</span><br><span class="line">    turtle.circle(40,80)</span><br><span class="line">    turtle.circle(-40,80)</span><br><span class="line">turtle.circle(40,80/2)</span><br><span class="line">turtle.fd(40)</span><br><span class="line">turtle.circle(16,180)</span><br><span class="line">turtle.fd(40 * 2/3)</span><br><span class="line">turtle.done()    #关闭turtle，一般在使用完turtle后添加，否则会无响应</span><br></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="库引用与import"><a href="#库引用与import" class="headerlink" title="库引用与import"></a>库引用与import</h3><pre><code>库引用：扩充Python程序功能的方式</code></pre><p>1.使用import保留字完成，采用如下编码风格<br>import&lt;库名&gt;<br>&lt;库名&gt;.&lt;函数名&gt;(&lt;函数参数&gt;)</p><p>2.使用from和import来简化代码<br>例：<code>import turtle</code><br><code>from turtle import*/from &lt;库名&gt; import &lt;函数名&gt;   (&lt;函数参数&gt;)</code></p><p>比较：<br>第一种方法不会出现函数重名的现象<br>第二种方法会出现</p><p>3.使用import和as保留字共同完成<br><code>import&lt;库名&gt;as&lt;库别名&gt;</code><br>&lt;库别名&gt;.&lt;函数名称&gt;(&lt;函数参数&gt;)<br>–给调用的外部库关联一个更短、更适合自己的名字<br><strong>建议第三种方法</strong></p><h3 id="turtle绘图窗体"><a href="#turtle绘图窗体" class="headerlink" title="turtle绘图窗体"></a>turtle绘图窗体</h3><p><code>turtle.setup(width,height,startx,starty)</code><br>-setup()设置窗体的大小及位置<br>-4个参数中后两个可选,去掉后默认在屏幕的正中心</p><h3 id="turtle画笔控制函数"><a href="#turtle画笔控制函数" class="headerlink" title="turtle画笔控制函数"></a>turtle画笔控制函数</h3><p><code>turtle.penup()  #别名 turtle.pu  ————抬起画笔</code><br><code>turtle.pendown()  #别名 turtle.pd  ————落下画笔</code><br><code>turtle.pensize(width)  #别名 turtle.width(width) ————画笔宽度</code><br><code>turtle.pencolor(color)  #————color为颜色字符串或者rgb值</code><br><code>turtle.colormode()  #————设置画笔RGB颜色的表示模式</code></p><p>画笔颜色有三种形式：<br>1.颜色字符串<br>2.rgb的小数值<br>3.rgb的元组值<br>附:rgb色彩体系<br>    rgb由三种基本颜色构成万物色<br>红黄蓝 0-255 整数或 0-1小数</p><p><code>turtle.colormode(mode)</code><br>-1.0小数值<br>-255整数值</p><h3 id="运动控制函数"><a href="#运动控制函数" class="headerlink" title="运动控制函数"></a>运动控制函数</h3><p>1.空间坐标体系，坐标原点在画布的正中心<br><code>turtle.goto(x,y) #————去到那个坐标</code><br>2.<code>turtle.forword(d) #别名 turtle.fd(d) ————向前前进</code><br><code>turtle.bk(d) #————后退</code><br>-d:进距离，可以为负数<br>弧形:<br><code>turtle.circle(r,extent)</code><br>-r:半径<br>-extent:绘制的弧度<br>半径是负数:圆心在右侧</p><h3 id="turtle方向控制函数（角度坐标体系）"><a href="#turtle方向控制函数（角度坐标体系）" class="headerlink" title="turtle方向控制函数（角度坐标体系）"></a>turtle方向控制函数（角度坐标体系）</h3><pre><code>控制海龟面对方向：绝对角度&amp;海龟角度</code></pre><p><code>turtle.setheading(angle） #别名 turtle.seth(angle) ————改变行进方向，海龟走角度</code><br><code>turtle.left(angle) #————海龟向左转</code><br><code>turtle.right(angle) #————海龟向右转</code><br>-angle:角度<br>只改变方向，不移动</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;继续Python笔记的整理，第二章是库的基本用法以及利用turtle库绘图的实例。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基本语法元素</title>
    <link href="http://yoursite.com/2018/09/22/Python-1/"/>
    <id>http://yoursite.com/2018/09/22/Python-1/</id>
    <published>2018-09-22T10:45:17.000Z</published>
    <updated>2018-09-22T12:31:52.128Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>之前学习Python的笔记排版过于凌乱，现在<br> 决定重新整理一下，以便日后的复习和使用。</em></p></blockquote> <a id="more"></a><h1 id="程序设计基本方法"><a href="#程序设计基本方法" class="headerlink" title="程序设计基本方法"></a>程序设计基本方法</h1><hr><h2 id="计算机特性"><a href="#计算机特性" class="headerlink" title="计算机特性"></a>计算机特性</h2><pre><code>功能性可编程性</code></pre><h2 id="摩尔定律"><a href="#摩尔定律" class="headerlink" title="摩尔定律"></a>摩尔定律</h2><pre><code>集成电路单位面积晶体管数约两年增长一倍</code></pre><p>预测很准确</p><h2 id="编译和解释"><a href="#编译和解释" class="headerlink" title="编译和解释"></a>编译和解释</h2><p>源代码-&gt;目标代码</p><pre><code>编译：将原代码一次性转化为目标代码解释：逐条,类似于实时静态语言：编译脚本语言：解释</code></pre><h2 id="程序的基本编写方法"><a href="#程序的基本编写方法" class="headerlink" title="程序的基本编写方法"></a>程序的基本编写方法</h2><pre><code>IPO输入 处理 输出输入是程序的开始输出是程序的结束处理方法——算法</code></pre><h2 id="编程解决问题的步骤"><a href="#编程解决问题的步骤" class="headerlink" title="编程解决问题的步骤"></a>编程解决问题的步骤</h2><pre><code>分析问题划分边界设计算法编写程序测试程序维护程序</code></pre><h2 id="计算机编程"><a href="#计算机编程" class="headerlink" title="计算机编程"></a>计算机编程</h2><pre><code>基础套路练习</code></pre><h1 id="实例1：温度转换"><a href="#实例1：温度转换" class="headerlink" title="实例1：温度转换"></a>实例1：温度转换</h1><hr> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#TempConvert.py</span><br><span class="line">TempStr = input(&quot;请输入带有符号的温度值：&quot;)</span><br><span class="line">if TempStr[-1] in [&apos;F&apos;,&apos;f&apos;]:</span><br><span class="line">    C = (eval(TempStr[0:-1]) - 32)/1.8</span><br><span class="line">    print(&quot;转化后的温度是&#123;:.2f&#125;C&quot;.format(C))</span><br><span class="line">elif TempStr[-1] in [&apos;C&apos;,&apos;c&apos;]:</span><br><span class="line">    F = 1.8*eval(TempStr[0:-1]) + 32</span><br><span class="line">    print(&quot;转化后的温度是&#123;:.2f&#125;F&quot;.format(F))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;输入格式错误&quot;)</span><br></pre></td></tr></table></figure><p>   这段代码很简单，但是也包含了很多Python的语法元素，下面来具体分析：</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre><code>Python的注释有两种方法：1.# 一个井号，一般用于单行注释2.&apos;&apos;&apos; &apos;&apos;&apos;或者&quot;&quot;&quot; &quot;&quot;&quot; 一对单引号或双引号，一般用于多行注释</code></pre><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><pre><code>缩进是Python的强制语法要求，表达语句间的关系</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code>变量采用标识名来表示变量命名字符：   大小写字母、数字、下划线和汉字及组合   注意：大小写敏感、首字符不能是数字、不能与保留字相同</code></pre><p>其中Python的保留字如下：（33个）<br><img src="/py/保留字.png" alt="保留字" title="保留字"></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><pre><code>定义：由一对单引号或双引号标识的字符的有序序列字符串的索引方式：正向递增序号 0 1 2 3 4 5 反向递增序号 -6 -5 -4 -3 -2 -1索引——返回某一个单个字符   &lt;  &gt;[M]切片——返回字符串的某一段字符  &lt;  &gt;[M：N]如温度转换实例中的TempStr[0:-1]表示的是从0开始读到最后一个字符串的字符相当于去掉最后一个字符</code></pre><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><pre><code>整数浮点数</code></pre><h3 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h3><pre><code>列表用[]表示，采用(,)分隔各元素       [&apos;F&apos;,&apos;f&apos;]表示两个元素’F&apos;或‘f’使用保留字in判断一个元素是否在列表中</code></pre><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><pre><code>赋值语句：由赋值符号构成的一行代码分支语句：由判断条件决定程序运行方向的语句</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre><code>根据输入参数产生不同输出的过程</code></pre><h3 id="程序的输入输出"><a href="#程序的输入输出" class="headerlink" title="程序的输入输出"></a>程序的输入输出</h3><pre><code>input()——从控制台获得用户输入的函数括号中是提示信息字符串         print——以字符型式像控制台输出结果的函数print函数的格式化{}表示槽  后续变量填充到槽中eval函数（评估函数）去掉参数最外侧引号并执行余下语句能将字符串语句的信息变成语句</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;之前学习Python的笔记排版过于凌乱，现在&lt;br&gt; 决定重新整理一下，以便日后的复习和使用。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记整理" scheme="http://yoursite.com/categories/Python%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="http://yoursite.com/2018/09/22/%E7%AC%AC1%E7%AF%87%E5%8D%9A%E6%96%87/"/>
    <id>http://yoursite.com/2018/09/22/第1篇博文/</id>
    <published>2018-09-22T02:01:56.000Z</published>
    <updated>2018-09-22T13:20:31.680Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>1.字体字号    2.分级标题<br>3.超链接      4.列表<br>5.插入图片    6.表格<br>7.分割线      8.引用<br>9.代码        10.流程图</em></p></blockquote><a id="more"></a><p>1.字体字号</p><p><em>这是斜体</em>或<em>这也是斜体</em><br><strong>这是粗体</strong><br><strong><em>这是加粗斜体</em></strong><br><del>这是删除线</del></p><p>改变字体、大小、颜色</p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="red">我是红色</font><br><font color="#008000">我是绿色</font><br><font color="Blue">我是蓝色</font><br><font size="5">我是尺寸</font><br><font face="黑体" color="green" size="5">我是黑体，绿色，尺寸为5</font><p>为文字添加背景色</p><table><tr><td bgcolor="yellow">背景色yellow</td></tr></table><p>2.分级标题</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>3.超链接</p><p>行内格式：<a href="https://gitergreat.github.io/" target="_blank" rel="noopener">我的博客</a><br>参考格式：[我的博客][1],百度[2]<br>[1]:<a href="https://gitergreat.github.io/" target="_blank" rel="noopener">https://gitergreat.github.io/</a><br>[2]:<a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a><br>自动链接：我的博客地址<a href="https://gitergreat.github.io/" target="_blank" rel="noopener">https://gitergreat.github.io/</a></p><p>4.列表</p><p>无序列表：<br>写法：</p><ul><li>无序列表1</li></ul><ul><li>无序列表2</li></ul><ul><li>无序列表3</li></ul><p>有序列表：<br>写法：<br>1.有序列表1<br>2.有序列表2<br>3.有序列表3</p><p>列表嵌套：<br>上一级和下一级之间敲三个空格即可</p><p>5.插入图片</p><p><img src="/images/ki.jpg" alt="Kyire Irving" title="Kyire Irving"></p><p>设置图片大小、位置<br><img src="/images/ki.jpg" width="50%" height="50%"></p><p><img src="/images/ki.jpg" width="251" height="350"></p><div align="right"><img src="/images/ki.jpg" width="50%" height="50%"></div><p>6.表格</p><table><thead><tr><th>表头1</th><th style="text-align:left">表头2</th><th style="text-align:center">表头3</th><th style="text-align:right">表头4</th></tr></thead><tbody><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对齐</td><td style="text-align:right">右对齐</td></tr><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对齐</td><td style="text-align:right">右对齐</td></tr><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对齐</td><td style="text-align:right">右对齐</td></tr></tbody></table><p>7.分割线</p><hr><hr><hr><hr><p>8.引用</p><blockquote><p>这是引用内容</p><blockquote><p>这是引用内容</p><blockquote><p>这是引用内容</p></blockquote></blockquote></blockquote><p>9.代码</p><p><code>print(&quot;Hello world!&quot;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br></pre></td></tr></table></figure><p>10.流程图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;1.字体字号    2.分级标题&lt;br&gt;3.超链接      4.列表&lt;br&gt;5.插入图片    6.表格&lt;br&gt;7.分割线      8.引用&lt;br&gt;9.代码        10.流程图&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Markdown语法" scheme="http://yoursite.com/categories/Markdown%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
