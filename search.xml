<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Bugku隐写题——猫片]]></title>
    <url>%2F2019%2F02%2F03%2Fmisc%E9%9A%90%E5%86%99%EF%BC%88%E7%8C%AB%E7%89%87%EF%BC%89%2F</url>
    <content type="text"><![CDATA[好久没有写过博客了，最近学习CTF，做了一些隐写题，有几道特别想记录一下。 题目链接https://ctf.bugku.com/challenges#%E7%8C%AB%E7%89%87(%E5%AE%89%E6%81%92) 图片： 题目思路1.查看010editor后没有发现什么特殊的结果，binwalk后同样没有什么发现。2.用stegsolve查看色道后，同样没有收获。3.根据提示，用stegsolve进行图片数据信息提取： Analyse-&gt;Data Extract-&gt; 发现隐藏一张图片png后，将它提取出来，保存为bin格式，修改后缀为png，然后用010Editor打开。 png文件的文件头为：89504E47，该图片的文件头有误，删除前面两个字节后保存。4.此时，可以打开提取出的png文件了，然后发现是一个半张二维码，很明显，需要修改图片高度。将图片高度修改后，又发现这个二维码好像是被反色过的，用stegsolve进行反色，得到正常的二维码。5.反色后用QR进行扫描后，得到云盘地址，下载下来后发现解压出来时有个text文件，但是打开。。。并不是。6.发现用winrar解压会出现诊断信息，这时考虑NTFS流隐写。用ntf streams editor打开解压后的文件夹。得到一个pyc文件。7.将这个pyc文件进行反编译。反编译py的网址：https://tool.lu/pyc/8.发现是个加密的脚本，根据这个脚本以及密文，写一个解密的脚本，运行后得到flag。加密脚本‘’’ ‘’’ #!/usr/bin/env python encoding: utf-8如果觉得不错，可以推荐给你的朋友！http://tool.lu/pycimport base64 def encode(): flag = ‘*‘ ciphertext = [] for i in range(len(flag)): s = chr(i ^ ord(flag[i])) if i % 2 == 0: s = ord(s) + 10 else: s = ord(s) - 10 ciphertext.append(str(s)) return ciphertext[::-1] ciphertext = [ ‘96’, ‘65’, ‘93’, ‘123’, ‘91’, ‘97’, ‘22’, ‘93’, ‘70’, ‘102’, ‘94’, ‘132’, ‘46’, ‘112’, ‘64’, ‘97’, ‘88’, ‘80’, ‘82’, ‘137’, ‘90’, ‘109’, ‘99’, ‘112’]解密脚本‘’’def decode(): ciphertext = [ ‘96’, ‘65’, ‘93’, ‘123’, ‘91’, ‘97’, ‘22’, ‘93’, ‘70’, ‘102’, ‘94’, ‘132’, ‘46’, ‘112’, ‘64’, ‘97’, ‘88’, ‘80’, ‘82’, ‘137’, ‘90’, ‘109’, ‘99’, ‘112’] ciphertext.reverse() flag = ‘’ for i in range(len(ciphertext)): if i % 2 == 0: s = int(ciphertext[i]) - 10 else: s = int(ciphertext[i]) + 10 s=chr(i^s) flag += s return flag def main(): flag = decode() print(flag) if name == ‘main‘: main()‘’’ ……完……未掌握知识：流隐写不熟练技能：脚本编写]]></content>
      <categories>
        <category>Bugku题目整理</category>
      </categories>
      <tags>
        <tag>CTF misc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python函数和代码复用（二）]]></title>
    <url>%2F2018%2F10%2F17%2FPython-5-2%2F</url>
    <content type="text"><![CDATA[第二节，实例7：七段数码管绘制 实例7：七段数码管绘制 代码实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546import turtle,timedef drawGap(): turtle.penup() turtle.fd(5)def drawLine(draw): drawGap() turtle.pendown() if draw else turtle.penup() turtle.fd(40) drawGap() turtle.right(90)def drawDigit(d): drawLine(True) if d in [2,3,4,5,6,7,8,9] else drawLine(False) drawLine(True) if d in [0,1,3,4,5,6,7,8,9] else drawLine(False) drawLine(True) if d in [0,2,3,5,6,8,9] else drawLine(False) drawLine(True) if d in [0,2,6,8] else drawLine(False) turtle.left(90) drawLine(True) if d in [0,4,5,6,8,9] else drawLine(False) drawLine(True) if d in [0,2,3,5,6,7,8,9] else drawLine(False) drawLine(True) if d in [0,1,2,3,4,7,8,9] else drawLine(False) turtle.left(180) turtle.penup() turtle.fd(20)def drawDate(date): turtle.pencolor(&quot;red&quot;) for i in date: if i == &apos;-&apos;: turtle.write(&quot;年&quot;,font=(&quot;Arial&quot;,18,&quot;normal&quot;)) turtle.pencolor(&quot;green&quot;) turtle.fd(40) elif i == &apos;=&apos;: turtle.write(&quot;月&quot;,font=(&quot;Arial&quot;,18,&quot;normal&quot;)) turtle.pencolor(&quot;blue&quot;) turtle.fd(40) elif i == &apos;+&apos;: turtle.write(&quot;日&quot;,font=(&quot;Arial&quot;,18,&quot;normal&quot;)) else: drawDigit(eval(i))def main(): turtle.setup(800,350,200,200) turtle.penup() turtle.fd(-350) turtle.pensize(5) drawDate(time.strftime(&apos;%Y-%m=%d+&apos;,time.gmtime())) turtle.hideturtle() turtle.done()main()]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python函数和代码复用（一）]]></title>
    <url>%2F2018%2F10%2F12%2FPython-5-1%2F</url>
    <content type="text"><![CDATA[第一节，函数的定义和使用 函数的定义和使用 函数的理解和定义函数是一段代码的表示 ——是一段具有特定功能的、可重用的语句组——是一种功能的抽象，一般函数表达特定功能——两个作用：降低变成难度 和 代码复用 def&lt;函数名&gt;(&lt;参数（0个或多个）&gt;): &lt;函数体&gt; return&lt;返回值&gt; -函数定义时，所制定的参数是一种占位符-函数定义后，如果不经过调用，不会被执行-函数定义时，参数时输入、函数体是处理、结果是输出（IPO） 函数的使用及调用过程调用时运行函数代码的方法：调用时 实际参数 替换形式参数 得到 返回值 函数的参数传递：参数个数：可有可无 必须有括号 可选参数传递：函数定义时可以为某些参数指定默认值，构成可选参数 def&lt;函数名&gt;(&lt;非可选参数&gt;,&lt;可选参数&gt;): &lt;函数体&gt; return&lt;返回值&gt; 例子： 123456def fact(n,m=1): s = 1 for i in range(1,n+1): s *= i return s//m#若不给m赋值，m默认为1 可变参数传递： 函数定义时可以设计可变数量参数，即不确定参数总数量 def&lt;函数名&gt;(&lt;参数&gt;,*b): &lt;函数体&gt; return&lt;返回值&gt; 实例： 12345678#计算n!乘数def fact(n,*b): #b 为可变参数 s = 1 for i in range(1,n+1): s *= i for item in b: #这里的b是组合数据类型 s *= item return s 调用：fact(10,3) fact(10,3,5,8) 参数传递的两种方式：位置或名称传递名称：直接规定形参的值 函数的返回值函数可以返回0个或多个结果-return保留字用来传递返回值-函数可以有返回值，也可以没有，可以有return，也可以没有-return可以传递0个返回值，也可以传递任意多个返回值 （,,,）元组类型 实例： 12345def fact(n, n=1): s = 1 for i in range(1,n+1): s*=i return s//m,n,m 调用结果： &gt;&gt;&gt;fact(10,5) (725760,10,5) &gt;&gt;&gt;a,b,c = fact(10,5) &gt;&gt;&gt;print(a,b,c) 725760 10 5 局部变量和全局变量函数定义外部的变量是全局变量函数中间使用的是局部变量 规则1：局部变量和全局变量不同-局部变量是占位符，与全局变量可能重名但不同-函数运算结束后，局部变量被释放-可以使用global保留字在函数内部使用全局变量 实例： 1234567n,s = 10,100def fact(n): global s #fact()函数中使用global保留字，声明此处s是全局变量s for i in range(1,n+1): s *= i return s #此处s指全局变量sprint(fact(),s) #此处全局变量s被函数修改 运行结果： &gt;&gt;&gt; 362880000 362880000 规则2：局部变量为组合数据类型且未创建，等同于全局变量注意：在函数中未被创建才是全局变量 lambde函数lambda函数返回函数名作为结果-lambda函数是一种匿名函数，即没有名字的函数-使用lambda保留字定义，函数名返回结果-lambda函数用于定义简单的、能够在一行内表示的函数 &lt;函数名&gt; = lambda &lt;参数&gt;:&lt;表达式&gt; 123f = lambda x,y : x+yf(10,15)25 -lambda函数主要用作一些特定函数或方法的参数-lambda函数有一些固定使用方式，建议逐步掌握-一般情况，建议使用def定义的普通函数]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python程序控制结构（五）]]></title>
    <url>%2F2018%2F10%2F12%2FPython-4-5%2F</url>
    <content type="text"><![CDATA[第五节，实例6：圆周率的计算 实例6：圆周率的计算问题分析：1、公式计算2、蒙特卡罗方法：撒点 代码实现123456789101112131415#CalPiV2.pyfrom random import randomfrom time import perf_counterDARTS = 1000*1000*10hits = 0.0start = perf_counter()for i in range(1,DARTS+1): x,y = random(),random() dist = pow(x**2+y**2,0.5) if dist&lt;=1.0: hits = hits + 1pi = 4*(hits/DARTS)print(&quot;圆周率值是：&#123;&#125;&quot;.format(pi))print(&quot;运行时间是：&#123;:.5f&#125;s&quot;.format(perf_counter()-start))#一段代码用 \ 可以进行换行 举一反三理解方法思维：-数学思维-计算思维谁更准确？ 程序运行时间分析：-使用time库计算获得程序运行时间-改变撒点数量，理解程序运行时间的分布-初步掌握简单的程序性能分析方法]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python程序控制结构（四）]]></title>
    <url>%2F2018%2F10%2F12%2FPython-4-4%2F</url>
    <content type="text"><![CDATA[第四节，random库的使用 random库的使用 基本介绍-random库：random库是使用随机数的Python标准库-伪随机数：采用梅森旋转算法生成的（伪）随机序列中的元素-random库用于生成随机数-使用random库：import random 两类函数：常用8个： -基本随机数函数：seed()，random() -扩展随机数函数：randint()，getrandbits()，uniform()，ranrange()， choice()，shuffle() 基本随机数函数随机数种子———梅森旋转算法———随机序列（随机数） 函数 描述 seed(a=None) 初始化给定的随机数种子，默认为当前系统时间 random() 生成一个(0.0,1.0)之间的随机小数 import random random.seed(10) random.random() ...... random.random() ...... -种子可以只给一次也可以不给-种子可以让随机数在现 扩展随机数函数 函数 描述 randint(a,b) 生成一个(a,b)之间的整数 randrange(m,n[,k]) 生成一个(m,n)之间以k为步长的随机整数 getrandbits(k) 生成一个k比特长的随机整数 uniform(a,b) 生成一个(a,b)之间的随机小数 choice(seq) 从序列seq中随机选择一个元素 shuffle(seq) 将序列seq中元素随机排列，返回打乱后的序列 -能过利用随机种子产生“确定”伪随机数-能够产生随机整数-能够对序列类型进行随机操作]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python程序控制结构（三）]]></title>
    <url>%2F2018%2F10%2F12%2FPython-4-3%2F</url>
    <content type="text"><![CDATA[第三节，程序的循环结构 程序的循环结构 遍历循环基本结构-遍历某个结构形成的循环方式 for &lt;循环变量&gt; in &lt;遍历结构&gt; : &lt;语句块&gt; -从遍历结构中逐一提取元素放入循环变量 遍历循环的应用1、记数循环（N次） for i in range(N): &lt;语句块&gt; -遍历由range()函数产生的数字序列，产生循环 2、for i in range(M,N,K) 特定次 &lt;语句块&gt; -遍历由range（）函数产生的数字序列，产生循环 从M开始到N之前的整数，以K为步长 3、字符串遍历循环 for c in s: &lt;语句块&gt; -s是字符串，遍历字符串每个字符，产生循环 -c表示字符串的每一个字符 对每一个字符运行一次语句块 4、列表遍历循环 for item in ls: &lt;语句块&gt; -ls是一个列表，遍历其每个元素，产生循环 for item in [123,&quot;PY&quot;,456]: print(item,end=&quot;,&quot;) 结果：123,PY,456 5、文件遍历循环 for line in fi: &lt;语句块&gt; -fi是一个文件标识符，遍历其每行，产生循环 遍历文件的每一行 观点：数据类型是由多个元素构成的，都可以用for in遍历 无限循环：由条件控制的循环运行方式while &lt;条件&gt;： &lt;语句块&gt; ctrl c退出 循环控制的保留字break和continue-break只能跳出一层循环 循环的高级用法for &lt;循环变量&gt;in&lt;遍历结构&gt;: &lt;语句块1&gt; else: &lt;语句块2&gt; while&lt;条件&gt;: &lt;语句块1&gt; else: &lt;语句块2&gt; 循环与else：-当循环没有被break语句退出时，执行else语句块-else语句块作为“正常”完成循环的奖励-这里else的用法与异常处理中的else用法类似 能用于了解一段循环中是否被break退出]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python程序控制结构（二）]]></title>
    <url>%2F2018%2F10%2F10%2FPython-4-2%2F</url>
    <content type="text"><![CDATA[第二节，实例5：身体质量指数BMI 身体质量指数BMI 背景分析BMI:体重（kg）/身高的平方（m）问题需求:-输入：给定身高和体重值-输出：BMI国内标准 国际标准 代码：123456789101112131415161718#CalBMIv3.pyheight,weight = eval(input(&quot;请输入身高（米）和体重（公斤）[逗号隔开]：&quot;))bmi = weight / pow(height,2)print(&quot;BMI数值为:&#123;:.2f&#125;&quot;.format(bmi))who,nat = &quot;&quot;,&quot;&quot;if bmi &lt; 18.5: who,nat = &quot;偏瘦&quot;,&quot;偏瘦&quot;elif 18.5&lt;=bmi&lt;24: who,nat = &quot;正常&quot;,&quot;正常&quot;elif 24&lt;=bmi&lt;25: who,nat = &quot;正常&quot;,&quot;偏胖&quot;elif 25&lt;=bmi&lt;28: who,nat = &quot;偏胖&quot;,&quot;偏胖&quot;elif 28&lt;=bmi&lt;30: who,nat = &quot;偏胖&quot;,&quot;肥胖&quot;else: who,nat = &quot;肥胖&quot;,&quot;肥胖&quot;print(&quot;BMI指标为：国际&apos;&#123;0&#125;&apos;，国内‘&#123;1&#125;&apos;&quot;.format(who,nat)) 举一反三：关注多条件的组合：-多分支条件之间的覆盖是重要问题-程序可运行，但不正确，要注意多分支-分支结构是程序的重要框架，读程序先看分支]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python程序控制结构（一）]]></title>
    <url>%2F2018%2F10%2F10%2FPython-4-1%2F</url>
    <content type="text"><![CDATA[第四章，程序控制结构。包括分支、循环结构。以及两个实例和random库的使用。 程序分支结构1、单分支结构if&lt;条件&gt;: &lt;语句块&gt; if Ture: &lt;语句块&gt; 2、二分支结构if…else 紧凑形式：适用于简单表达式的二分支结构&lt;表达式1&gt;if&lt;条件&gt;else&lt;表达式2&gt;（表达式：是语句的一部分 不支持赋值） 3、多分支结构if &lt;条件&gt;: &lt;语句块1&gt;elif: &lt;语句块2&gt; ……else: &lt;语句块2&gt; 注意：多条件之间的包含关系 变量取值范围的覆盖 4、条件判断及组合操作符：&lt; &lt;= &gt;= &gt; == != 用于条件判断的三个保留字:x and yx or ynot x与或非 5、程序的异常处理try: &lt;语句块1&gt;except: &lt;语句块2&gt; try: &lt;语句块1&gt;except&lt;异常类型&gt;: &lt;语句块2&gt;&lt;异常类型&gt; NameError try: &lt;语句块1&gt;except: &lt;语句块2&gt;else: &lt;语句块3&gt;finally: &lt;语句块4&gt; -finally对应语句块4一定执行-else对应语句块3在不发生异常时执行]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基本数据类型（五）]]></title>
    <url>%2F2018%2F10%2F10%2FPython-3-5%2F</url>
    <content type="text"><![CDATA[第五节，应用Python time库来实现文本进度条 实例4：文本进度条 文本进度条简述-采用字符串方式打印可以动态变化的文本进度条-进度条需要能在一行中逐渐变化 文本进度条的简单开始1234567891011#TextProBarV1.pyimport timescale = 10print(&quot;------执行开始------&quot;)for i in range(scale+1): a = &apos;*&apos; * i b = &apos;.&apos; * (scale - i) c = (i/scale)*100 print(&quot;&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&quot;.format(c,a,b)) time.sleep(0.1)print(&quot;------执行结束------&quot;) 文本进度条的单行动态刷新-刷新的本质是：用后打印的字符覆盖之前的字符-不能换行：print()需要被控制-要能回退：打印后光标退回到之前的位置 \r 12345#TextProBarV1.pyimport timefor i in range(101): print(&quot;\r&#123;:3&#125;%&quot;.format(i),end=&quot;&quot;) #end 使打印完字符串后不换行，停留在当前位置 time.sleep(0.1) 文本进度条实例完整效果12345678910111213#TextProBarV3.pyimport timescale = 50print(&quot;执行开始&quot;.center(scale//2,&quot;-&quot;)) #字符串函数 start = time.perf_counter()for i in range(scale+1): a = &apos;*&apos; * i b = &apos;.&apos; * (scale - i) c = (i/scale)*100 dur = time.perf_counter() - start print(&quot;\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;.format(c,a,b,dur),end=&apos;&apos;) time.sleep(0.1)print(&quot;\n&quot;+&quot;执行结束&quot;.center(scale//2,&apos;-&apos;)) 文本进度条问题举一反三：-文本进度条程序使用了perf_counter()计时-计时方法适合各类需要统计时间的计算问题-例如：比较不同算法时间、统计部分程序运行时间 进度条拓展：-在任何运行时间较长的程序中增加进度条-在任何希望提高用户体验的应用中增加进度条-进度条是人机交互的纽带之一 文本进度条的不同设计函数——开始慢后来快体验会更好]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基本数据类型（四）]]></title>
    <url>%2F2018%2F10%2F09%2FPython-3-4%2F</url>
    <content type="text"><![CDATA[第四节time库的使用 time库的使用 time库简介time库是Python中处理时间的标准库 -计算机时间的表达-提供获取系统时间并格式化输出功能-提供系统级精确计时功能，用于程序性能分析 包含三种函数：-时间获取：time()、ctime()、gmtime()-时间格式化：strftime()、strptime()-程序计时：sleep()、perf_counter() 时间获取函数: time()–获取当前时间戳，即计算机内部时间值，浮点数time.time()–表示从1970年1月1日零点开始到现在以秒为单位的时间值 ctime()–获取当前时间并以易读的方式表示，返回字符串time.ctime()–获取人类易读时间的最简单函数 gmtime()–获取当前时间，表示为计算机可处理的时间格式time.gmtime() 时间格式化将时间以合理的方式展示出来-格式化：类似字符串格式化，需要有展示模板-展示模板由特定的格式化控制符组成-strftime()方法 将时间字符串转化为时间变量例：1234t = time.gmtime()time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,t)timeStr = &apos;2018-01-26 12:55:20&apos;time.strptime(timeStr,&quot;%Y-%m-%d %H:%M:%S&quot;) 程序计时应用-程序计时指测量起止动作所经历时间的过程-测量时间：perf_counter() ——精准-产生时间：sleep()]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最近的自己]]></title>
    <url>%2F2018%2F10%2F09%2Ffuture-leaning%2F</url>
    <content type="text"><![CDATA[最近有点迷茫… 思考未来的学习 感觉最近的学习有点找不到方向，思考了一下，可能是太过于急躁了。看到身边有很多优秀的人，看到了自己和他们的差距。现在自己的问题感觉还是基础知识不够扎实，还是要踏踏实实地学好基础知识，再去更加深入的学习。切忌急功近利，切忌。最近还是先认真的学习一下C++和python。之后开始学习html和php之类，再去刷一下ctf的web题。加油！]]></content>
      <categories>
        <category>总结与反思</category>
      </categories>
      <tags>
        <tag>日常总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[链表的各种操作]]></title>
    <url>%2F2018%2F10%2F08%2FC-Linkedlist%2F</url>
    <content type="text"><![CDATA[最近学数据结构，做了一个链表的porject，用C实现的。感觉是对C语言的一个复习吧。记录一下，加深自己的熟悉程度。 链表 基本要求project的要求就是写六个函数：1.create函数：根据数组创建链表2.locate函数：输入想寻找第i个结点，返回这个结点的地址，若找不到，则返回NULL。3.max函数：在链表中寻找数据最大的结点。4.reverse函数：将链表逆序。5.tidyup函数：将有序链表的多余重复结点删除。6.mergelists函数：合并两个链表，并按非递减顺序排列。 数据结构一个结点(node)1234typedef struct link&#123; int data; struct link *next;&#125;Link; 链表是由一个个结点用指针连接起来组成的，结点是组成链表的基本单位。对于单向链表而言，一个结点包含一个元素和一个指向下一个结点的指针。用C实现可以利用结构体定义一个结点。如果想用C++实现，可以利用类和模板进行定义。 head、tail、curr指针12345typedef struct list&#123; Link *head; Link *tail; int len;&#125;List; 对于一个有头结点的单项链表而言，需要定义一个头结点，头结点不存放元素。头结点的作用就是使我们能够找到这个链表。此外，还定义了一个tail指针，tail指针指向链表的最后一个元素，方便在链表的最后插入结点。在具体的函数实现中，有时可能会用到额外的一个指针，姑且称之为curr指针，它可以用来遍历链表。也可以用来指向当前的结点的上一个结点，以便我们在当前节点插入新的结点。在这里我用了一个结构体，将head指针和tail指针以及len放入其中，目的是可以作为函数的参数，方便我们调用，而且这也是一种安全的编程思路。 算法分析1.create函数123456789101112131415void create(List* plist,int *array,int arrlen)&#123; plist-&gt;head = (Link*)malloc(sizeof(Link)); //创建一个头结点，并且为之分配内存 plist-&gt;tail = plist-&gt;head; int i; for(i=0; i&lt;arrlen; i++) &#123; Link *a = (Link*)malloc(sizeof(Link)); //创建结点 a-&gt;data = array[i]; //将数组中的元素填入结点中 a-&gt;next = NULL; plist-&gt;tail-&gt;next = a; //将结点连接到最后一个结点之后 plist-&gt;tail = plist-&gt;tail-&gt;next; //将tail指针往后移动 plist-&gt;len = plist-&gt;len + 1; //每连接一个结点，将链表的长度加1 &#125;&#125; 2.locate函数12345678910111213141516171819202122232425Link* locate(List* plist)&#123; printf(&quot;-------------------- 定位结点所在的地址: --------------------\n\n&quot;); int i,j; Link *p; printf(&quot;请输入你想寻找第几个结点：&quot;); scanf(&quot;%d&quot;,&amp;i); getchar(); printf(&quot;\n&quot;); //遍历链表（利用curr指针遍历），寻找是否存在第i个结点 //注意第一个有元素结点是是首元结点（第一个结点） //return用法：出现return立刻退出函数，并返回return后的元素 for(p = plist-&gt;head-&gt;next,j = 1; p ;p = p-&gt;next,j++) &#123; if(j == i) &#123; return p; &#125; &#125; return NULL;&#125; 3.max函数12345678910111213141516171819202122232425262728293031323334353637int max(List* plist,int* isfind)&#123; printf(&quot;----------------- 确定链表中的值最大的结点: -----------------\n\n&quot;); int j; int i = 0; int maxnode[10]; //用来记录最大值所对应的结点 int maximum = plist-&gt;head-&gt;next-&gt;data; Link *p = plist-&gt;head-&gt;next; if(p == NULL)&#123; //判断是否为空链表 isfind = 0; printf(&quot;链表为空\n&quot;); return; &#125; //遍历链表，找最大值 for(p = plist-&gt;head-&gt;next,j = 1; p ;p = p-&gt;next,j++)&#123; if(maximum &lt; p-&gt;data)&#123; maximum = p-&gt;data; &#125; &#125; //根据最大值，找所有取到最大值的结点 for(p = plist-&gt;head-&gt;next,j = 1; p ;p = p-&gt;next,j++)&#123; if(maximum == p-&gt;data)&#123; maxnode[i] = j; i++; &#125; &#125; //将所有取到最大值的结点输出 printf(&quot;所有取到最大值的结点为：&quot;); for(j = 0; j&lt;i; j++) &#123; printf(&quot;%d &quot;,maxnode[j]); &#125; printf(&quot;\n&quot;); return maximum;&#125; 4.reverse函数123456789101112131415161718192021222324252627282930313233void reverse(List* prelist,List* plist)&#123; printf(&quot;-------------------- 倒置链表元素的顺序: --------------------\n\n&quot;); int i; Link *p,*q; for(i = 1; i &lt;= plist-&gt;len; i++) &#123; //每次遍历链表找到最后两个结点 p = plist-&gt;head-&gt;next; q = plist-&gt;head-&gt;next; while(p-&gt;next != NULL) &#123; q = p; p = p-&gt;next; &#125; //第一次的遍历时，创建一个新的头结点，并与最后一个结点相连 if(i == 1)&#123; prelist-&gt;head = (Link*)malloc(sizeof(Link)); prelist-&gt;tail = p; prelist-&gt;head-&gt;next = p; q-&gt;next = NULL; //断开倒数第二个结点和最后一个结点的连接 //之后每次都把新的结点插入到最后，并把原链表的倒数第二个结点和最后一个结点的连接断开 &#125;else&#123; prelist-&gt;tail-&gt;next = p; prelist-&gt;tail = p; q-&gt;next = NULL; &#125; &#125;&#125; 还有另外一种较简便的方法以后补充 5.tidyup函数1234567891011121314151617181920212223242526void tidyup(List* plist)&#123; printf(&quot;------------------- 删除值相同的多余结点: -------------------\n\n&quot;); Link *p,*q,*r; p = plist-&gt;head-&gt;next; q = p-&gt;next; /*因为链表是有序的 每次比较相邻两个结点，如果值相同，则释放掉后面的结点 并把q指针往后移，p指针保持不变，与后面的一个结点连接后继续比较*/ /*当值不相同时，两个指针同时向后移动*/ while(p-&gt;next != NULL) &#123; if(p-&gt;data == q-&gt;data) &#123; p-&gt;next = q-&gt;next; r = q; free(r); q = p-&gt;next; plist-&gt;len = plist-&gt;len - 1; &#125;else&#123; p = q; q = q-&gt;next; &#125; &#125;&#125; 6.mergelists函数12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455void mergelists(List* plist1, List *plist2, List *plist3)&#123; printf(&quot;----------------------- 合并两个链表: -----------------------\n\n&quot;); Link *cur = NULL; Link *p = plist1-&gt;head; Link *q = plist2-&gt;head; //如果两个链表中有空链表，合并的链表就是另一个链表本身 if(NULL == p-&gt;next)&#123; plist3-&gt;head = q; &#125;else if(NULL == q-&gt;next)&#123; plist3-&gt;head = p; &#125; //判断哪一个链表的首元结点值更小，合并的链表的头结点就为那个链表的头结点 if(p-&gt;next-&gt;data &lt;= q-&gt;next-&gt;data)&#123; plist3-&gt;head = p; &#125;else&#123; plist3-&gt;head = q; &#125; //p,q指针分别移动到两个链表的首元结点上，cur在合并链表的头结点 p = p-&gt;next; q = q-&gt;next; cur = plist3-&gt;head; //从首元开始遍历，元素小的连接在plist3后面，然后向后移动对应链表的指针，继续比较 while(p != NULL &amp;&amp; q != NULL) &#123; if(p-&gt;data &lt;= q-&gt;data)&#123; cur-&gt;next = p; cur = p; p = p-&gt;next; &#125;else&#123; cur-&gt;next = q; cur = q; q = q-&gt;next; &#125; &#125; 如果两个链表还没有连接完的，就把剩下的结点直接连接在plist3后面 while(p != NULL) &#123; cur-&gt;next = p; cur = p; p = p-&gt;next; &#125; while(q != NULL) &#123; cur-&gt;next = q; cur = q; q = q-&gt;next; &#125; //计算plist3长度，为两链表长度之和 plist3-&gt;len = plist1-&gt;len + plist2-&gt;len;&#125; 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;typedef struct link&#123; int data; struct link *next;&#125;Link;typedef struct list&#123; Link *head; Link *tail; int len;&#125;List;void create(List* plist,int* array,int arrlen);Link* locate(List* plist);int max(List* plist,int* isfind);void reverse(List* prelist,List* plist);void tidyup(List* plist);void mergelists(List* plist1,List* plist2,List *plist3);void create(List* plist,int *array,int arrlen)&#123; plist-&gt;head = (Link*)malloc(sizeof(Link)); plist-&gt;tail = plist-&gt;head; int i; for(i=0; i&lt;arrlen; i++) &#123; Link *a = (Link*)malloc(sizeof(Link)); a-&gt;data = array[i]; a-&gt;next = NULL; plist-&gt;tail-&gt;next = a; plist-&gt;tail = plist-&gt;tail-&gt;next; plist-&gt;len = plist-&gt;len + 1; &#125;&#125;Link* locate(List* plist)&#123; printf(&quot;-------------------- 定位结点所在的地址: --------------------\n\n&quot;); int i,j; Link *p; printf(&quot;请输入你想寻找第几个结点：&quot;); scanf(&quot;%d&quot;,&amp;i); getchar(); printf(&quot;\n&quot;); for(p = plist-&gt;head-&gt;next,j = 1; p ;p = p-&gt;next,j++) &#123; if(j == i) &#123; return p; &#125; &#125; return NULL;&#125;int max(List* plist,int* isfind)&#123; printf(&quot;----------------- 确定链表中的值最大的结点: -----------------\n\n&quot;); int j; int i = 0; int maxnode[10]; int maximum = plist-&gt;head-&gt;next-&gt;data; Link *p = plist-&gt;head-&gt;next; if(p == NULL)&#123; isfind = 0; printf(&quot;链表为空\n&quot;); return; &#125; for(p = plist-&gt;head-&gt;next,j = 1; p ;p = p-&gt;next,j++)&#123; if(maximum &lt; p-&gt;data)&#123; maximum = p-&gt;data; &#125; &#125; for(p = plist-&gt;head-&gt;next,j = 1; p ;p = p-&gt;next,j++)&#123; if(maximum == p-&gt;data)&#123; maxnode[i] = j; i++; &#125; &#125; printf(&quot;所有取到最大值的结点为：&quot;); for(j = 0; j&lt;i; j++) &#123; printf(&quot;%d &quot;,maxnode[j]); &#125; printf(&quot;\n&quot;); return maximum;&#125;void reverse(List* prelist,List* plist)&#123; printf(&quot;-------------------- 倒置链表元素的顺序: --------------------\n\n&quot;); int i; Link *p,*q; for(i = 1; i &lt;= plist-&gt;len; i++) &#123; p = plist-&gt;head-&gt;next; q = plist-&gt;head-&gt;next; while(p-&gt;next != NULL) &#123; q = p; p = p-&gt;next; &#125; if(i == 1)&#123; prelist-&gt;head = (Link*)malloc(sizeof(Link)); prelist-&gt;tail = p; prelist-&gt;head-&gt;next = p; q-&gt;next = NULL; &#125;else&#123; prelist-&gt;tail-&gt;next = p; prelist-&gt;tail = p; q-&gt;next = NULL; &#125; &#125;&#125;void tidyup(List* plist)&#123; printf(&quot;------------------- 删除值相同的多余结点: -------------------\n\n&quot;); Link *p,*q,*r; p = plist-&gt;head-&gt;next; q = p-&gt;next; while(p-&gt;next != NULL) &#123; if(p-&gt;data == q-&gt;data) &#123; p-&gt;next = q-&gt;next; r = q; free(r); q = p-&gt;next; plist-&gt;len = plist-&gt;len - 1; &#125;else&#123; p = q; q = q-&gt;next; &#125; &#125;&#125;void mergelists(List* plist1, List *plist2, List *plist3)&#123; printf(&quot;----------------------- 合并两个链表: -----------------------\n\n&quot;); Link *cur = NULL; Link *p = plist1-&gt;head; Link *q = plist2-&gt;head; if(NULL == p-&gt;next)&#123; plist3-&gt;head = q; &#125;else if(NULL == q-&gt;next)&#123; plist3-&gt;head = p; &#125; if(p-&gt;next-&gt;data &lt;= q-&gt;next-&gt;data)&#123; plist3-&gt;head = p; &#125;else&#123; plist3-&gt;head = q; &#125; p = p-&gt;next; q = q-&gt;next; cur = plist3-&gt;head; while(p != NULL &amp;&amp; q != NULL) &#123; if(p-&gt;data &lt;= q-&gt;data)&#123; cur-&gt;next = p; cur = p; p = p-&gt;next; &#125;else&#123; cur-&gt;next = q; cur = q; q = q-&gt;next; &#125; &#125; while(p != NULL) &#123; cur-&gt;next = p; cur = p; p = p-&gt;next; &#125; while(q != NULL) &#123; cur-&gt;next = q; cur = q; q = q-&gt;next; &#125; plist3-&gt;len = plist1-&gt;len + plist2-&gt;len;&#125;int main() &#123; int a[] = &#123;5,5,5,7,9,16,27,27,38,41&#125;; int m[] = &#123;1,5,6,8,8,10,28,49,50,51&#125;; int n[] = &#123;2,4,7,10,12,14,18,24,29,30&#125;; int lena = sizeof(a)/sizeof(int),lenm = sizeof(m)/sizeof(int),lenn = sizeof(n)/sizeof(int); int x,maximum,isfind = 1; Link *p; List list,listm,listn,relist,medlist,tidylist,mergelist; list.len = relist.len = tidylist.len = listm.len = listn.len = 0; start: printf(&quot;----------------- 请选择想对链表进行的操作: -----------------\n&quot;); printf(&quot; 1.定位结点所在的地址 2.确定链表中的值最大的结点\n 3.倒置链表元素的顺序 4.删除值相同的多余结点\n 5.合并两个链表 6.退出\n&quot;); scanf(&quot;%d&quot;,&amp;x); getchar(); printf(&quot;\n&quot;); if(x == 1||x == 2||x == 3||x == 4)&#123; create(&amp;list,a,lena); printf(&quot;---------------- 已经根据数组创建了以下链表: ----------------\n\n&quot;); printf(&quot;list:\n&quot;); for(p = list.head-&gt;next; p; p = p-&gt;next) &#123; printf(&quot;%d &quot;,p-&gt;data); &#125; printf(&quot;\n\n&quot;); &#125;else if (x == 5)&#123; create(&amp;listm,m,lenm); create(&amp;listn,n,lenn); printf(&quot;---------------- 已经根据数组创建了以下链表: ----------------\n\n&quot;); printf(&quot;listm:\n&quot;); for(p = listm.head-&gt;next; p; p = p-&gt;next) &#123; printf(&quot;%d &quot;,p-&gt;data); &#125; printf(&quot;\n\n&quot;); printf(&quot;listn:\n&quot;); for(p = listn.head-&gt;next; p; p = p-&gt;next) &#123; printf(&quot;%d &quot;,p-&gt;data); &#125; printf(&quot;\n\n&quot;); &#125; switch(x) &#123; case 1: p = locate(&amp;list); if(p != NULL)&#123; printf(&quot;该结点的地址为：%#X\n\n&quot;,p); &#125;else&#123; printf(&quot;未找到该结点\n\n&quot;); &#125; goto start; case 2: maximum = max(&amp;list,&amp;isfind); if(isfind)&#123; printf(&quot;最大值是%d\n\n&quot;,maximum); &#125; goto start; case 3: create(&amp;medlist,a,lena); reverse(&amp;relist,&amp;medlist); printf(&quot;元素倒置后的链表为relist:\n&quot;); for(p = relist.head-&gt;next; p; p = p-&gt;next) &#123; printf(&quot;%d &quot;,p-&gt;data); &#125; printf(&quot;\n\n&quot;); goto start; case 4: create(&amp;tidylist,a,lena); tidyup(&amp;tidylist); printf(&quot;删除值相同的多余结点后的链表为tidylist:\n&quot;); for(p = tidylist.head-&gt;next; p; p = p-&gt;next) &#123; printf(&quot;%d &quot;,p-&gt;data); &#125; printf(&quot;\n\n&quot;); goto start; case 5: mergelists(&amp;listm, &amp;listn, &amp;mergelist); printf(&quot;合并后的链表为mergelist:\n&quot;); for(p = mergelist.head-&gt;next; p; p = p-&gt;next) &#123; printf(&quot;%d &quot;,p-&gt;data); &#125; printf(&quot;\n\n&quot;); goto start; case 6: printf(&quot;---------------------- 谢谢使用，再见! ----------------------\n\n&quot;); break; default: goto start; &#125; system(&quot;pause&quot;); return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构、C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基本数据类型（三）]]></title>
    <url>%2F2018%2F09%2F24%2FPython-3-3%2F</url>
    <content type="text"><![CDATA[第三节是字符串类型及操作，加快进度了。… 字符串 字符串：由0个或多个字符组成的有序字符序列。 -字符串由一对单引号或一对双引号表示 例：”请输入带有符号的温度值：” 或者 ‘C’-字符串是带有字符的有序序列，可以对其中的字符进行索引 例：’请’是上面字符串的第0个字符 字符串的两类共四种表示方法1.由一对单引号或双引号表示，仅表示单行字符串 例：”请输入带有符号的温度值：” 或者 ‘C’2.由一对三单引号或三双引号表示，可表示多行字符串 例：’’’Python 语言’’’ 注：三单引号形成字符串，注释是其使用方法之一 字符串中使用单引号，外面就用双引号 字符串中使用双引号，外面就用单引号 字符串中既有单引号又有双引号，外面就用三单引号 字符串的序号 正向递增序号 反向递减序号 字符串的操作 字符串的使用 索引：返回字符串中的单个字符 ———— &lt;字符串&gt;[M] 切片：返回字符串中的一段字符子串 ———— &lt;字符串&gt;[M:N]字符串切片的高级用法： * 使用[M:N:K]根据步长对字符串切片 * &lt;字符串&gt;[M:N],M缺失表示至开头，N缺失表示至结尾 * &lt;字符串&gt;[M:N:K],根据步长K对字符串切片 特殊用法[::-1]将字符串逆序 字符串的特殊字符转义符 \ 转义符表示特殊字符的本意例：\” 表示字符串中的出现“ 转义符形成一些组合，表示一些不可打印的含义例：”\b”回退，”\n”换行（光标移动到下行首）”\r”回车（光标移动到本行首） 字符串的操作符 操作符 描述 x + y 连接两个字符串x和y n * x 或 x * n 复制n次字符串x x in s 如果x是s的字串，返回True,否则返回False 例：获取星期字符串 123451. #WeekNamePrintV1.py weekStr = &quot;星期一星期二星期三星期四星期五星期六星期日&quot; weekId = eval(input(&quot;请输入星期数字（1-7）:&quot;)) pos = (weekId - 1) * 3 print(weekStr[pos:pos+3]) 12342. #WeekNamePrintV2.py weekStr = &quot;一二三四五六日&quot; weekId = eval(input(&quot;请输入星期数字（1-7）:&quot;)) print(&quot;星期&quot; + weekStr[weekId-1] ) 字符串处理函数 函数 描述 len(x) 长度，返回字符串x的长度 str(x) 任何类型x所对应的字符串形式 例：str(1.23)结果为”1.23”，str([1,2])结果为”[1,2]” eval(x) 与eval(x)做了相反的工作，是一对函数 repr(x) 返回一个对象的string格式 hex(x)或eval() 整数x的十六进制或八进制小写形式字符串 chr(u) x为Unicode编码，返回其对应的字符 ord(x) x为字符，返回其对应的Unicode编码 注：Unicode编码：Python字符串中的每个字符都是Unicode编码 字符串处理方法 ”方法“特指&lt;a>.&lt;b>()风格中的函数&lt;b>() 方法本身也是函数，但与&lt;a>有关，&lt;a>.&lt;b>()风格使用 字符串及变量也是&lt;a>,存在一些方法 方法面向对象 一些方法形式提供的字符串处理功能 方法及使用 描述 str.lower()或str.upper() 返回字符串的副本，全部字符小写/大写 str.split(sep=None) 返回一个列表，由str根据sep被分隔的部分组成 str.count(sub) 返回字串sub在str中出现的次数 str.replace(old,new) 返回字符串str副本，所有old字串被替换为new str.center(width[,fillchar]) 字符串str根据宽度width居中，fillchar可选 str.strip(chars) 从str中去掉在其左侧和右侧chars中列出的字符 str.join(iter) 在iter变量出最后元素外的每个元素增加一个str str.title() 以首字母大写的方式显示字符串 字符串类型的格式化 -格式化是对字符串进行格式表达的方式 -字符串格式化使用.format()方法，用法如下： &lt;模板字符串&gt;.format() 槽{ } format()中参数的顺序和槽{}的顺序默认一一对应 可以在槽中指定需要添加参数的位置 format()方法的格式控制 : &lt;填充&gt; &lt;对齐&gt; &lt;宽度&gt; &lt;,&gt; &lt;.精度&gt; &lt;类型&gt; 引导符号 用于填充单个字符 &lt;左对齐 &gt;右对齐 ^居中对齐 槽设定的输出宽度 数字的千分位分隔符 浮点数小数精度或字符串最大输出长度 整数类型b,c,d,o,x,X（十六进制中字母大写） 浮点数类型e,E,f,% 例： format()方法的格式控制 &quot;{0:=^20}&quot;.format(&quot;PYTHON&quot;) : ————引导符 = ————填充符号 填充= ^ ————居中对齐 20 ———宽度 省略填充对齐直接给出宽度默认填充为空格变量左对齐]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基本数据类型（二）]]></title>
    <url>%2F2018%2F09%2F24%2FPython-3-2%2F</url>
    <content type="text"><![CDATA[今天是中秋节，继续整理一下笔记吧。最近任务比较多，博客就慢慢更吧。第三章第二节来通过一个实例来展示数字类型的具体应用，同时也让我知道努力学习的重要性。 实例3：天天向上的力量 1%。的力量1234#DayDayUpQ1.pydayup = pow(1.001,365)daydown = pow(0.999,365)print(&quot;向上：&#123;:.2f&#125;，向下：&#123;:.2f&#125;&quot;.format(dayup,daydown)) 结果：向上：1.44，向下：0.69 5%。和1%的力量123456#DayDayUpQ2.pydayup = pow(1.001,365)dayfactor = 0.005dayup = pow(1+dayfactor,365)daydown = pow(1-dayfactor,365)print(&quot;向上：&#123;:.2f&#125;,向下：&#123;:.2f&#125;&quot;.format(dayup,daydown)) 5%。结果：向上：6.17，向下：0.161%结果：向上37.78，向下：0.03 工作日努力，双休日休息123456789#DayDayUpQ3.pydayup = 1.0dayfactor = 0.01for i in range(365): if i % 7 in [6,0]: dayup = dayup*(1-dayfactor) else: dayup = dayup*(1+dayfactor)print(&quot;工作日的力量：&#123;:.2f&#125;&quot;.format(dayup)) 结果：工作日的力量：4.63 工作日的努力弥补-工作日努力到什么水平才能与每天努力1%的结果相同呢？（利用def和while） 代码如下12345678910111213#DayDayUpQ4.pydef dayUp(df): dayup = 1 for i in range(365): if i % 7 in [6,0]: dayup = dayup*(1 - 0.01) else: dayup = dayup*(1 + df) return dayupdayfactor = 0.01while dayUp(dayfactor) &lt; 37.78: dayfactor += 0.001 print(&quot;工作日的努力参数是:&#123;:.3f&#125;&quot;.format(dayfactor)) 结果：工作日的努力参数是：0.019 代码分析 以上利用def保留字定义，且有参数df的函数可以实现参数不同时的代码共用。 while是执行循环的保留字扩展：for…in… 计算思维、抽象和自动化def…while… 试错 结论GRIT 坚毅——获得成功持之以恒，天天向上的力量很惊人]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基本数据类型（一）]]></title>
    <url>%2F2018%2F09%2F23%2FPython-3-1%2F</url>
    <content type="text"><![CDATA[第三章是关于数据类型的内容，涉及数字类型及其操作、列表类型、字符串类型及其操作等。同时穿插实例来应用数据类型。第一节是关于数字类型及其操作的内容。 数字类型及其操作 数字类型整数类型-可正可负pow(x,y) #计算x的y次方-十进制-二进制 以0b或0B开头-八进制 以0o或0O开头-十六进制 以0x或0X开头 浮点数类型浮点数的概念与实数概念一致-带有小数点及小数-浮点数取值范围和小数精度存在限制，但常规计算可忽略浮点数间的运算存在不确定尾数，不是bug解释：二进制表示小数，可以无限接近，但不完全相同 round(x,d) #对x四舍五入，d是小数截取位数浮点数间运算及比较用round()函数辅助科学记数法:用e或E作为幂的符号 复数类型如3+4j ————与数学中的复数概念一致z.real() #获得实部z.imag() #获得虚部abs() #为复数取模 数字类型操作数值运算操作符 操作符及其使用 描述 x/y 产生浮点数结果 x//y 产生证书结果 +x x本身 -y y的负值 x%y 余数，模运算10%3结果是1 x**y 幂运算，x的y次幂 二元操作符(x=x op y) 增强操作符及其使用 x+=y x-=y x*=y x/=y x//=y x%=y x**=y 注：类型之间可进行混合运算，生成”最宽的类型“（整数&lt;浮点数&lt;复数） 数值运算函数 函数及使用 描述 abs(x) x的绝对值 divmod(x,y) 商余(x//y,x%y)，同时输出商和余数 pow(x,y[,z]) 幂余，(x**y)%z，z可省略 round(x[,d]) 四舍五入，d是保留小数位数，默认为0 max(x1,x2,…,xn) 最大值，返回x1,x2,…,xn的最大值，n不限 min(x1,x2,…,xn) 最小值，返回x1,x2,…,xn的最小值，n不限 int(x) 将x变成整数，舍弃小数部分 float(x) 将x变成浮点数，增加小数部分 eg. float(&quot;1.23&quot;) #结果为1.23 complex(x) 将x变成复数，增加虚数部分 注：使用函数input()时，Python将用户输入解读为字符串。可用int()函数，将Python输入视为数值。]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基本图形绘制]]></title>
    <url>%2F2018%2F09%2F22%2Fpython-2%2F</url>
    <content type="text"><![CDATA[继续Python笔记的整理，第二章是库的基本用法以及利用turtle库绘图的实例。 深入理解Python语言 计算机技术的演进：1.计算机系统结构时代 计算机能力问题2.网络和视窗时代 交互问题3.复杂信息系统时代 数据问题4.人工智能时代 人类问题当前:新计算时代 编程语言的多样初心：C：指针、内存、数据类型语言本质：理解计算机系统结构解决问题：性能java：面向对象对象、跨平台、运行时…python：理解问题的求解 python语言的特点：通用性 强制可读性较少的底层语法元素 多种编程方式*支持中文字符 语法简介生态高产:python是最高产的程序设计语言工具决定思维 “超级语言的诞生”机器语言、汇编语言——不适合编程高级语言，与CPU无关——适合编程超级语言，庞大的计算生态。python——唯一的超级语言 实例二：Python蟒蛇绘制 下面先给出代码，再进行代码分析 蟒蛇绘制代码1234567891011121314151617#PythonDraw.pyimport turtleturtle.setup(650,350,200,200)turtle.penup()turtle.fd(-250)turtle.pendown()turtle.pensize(25)turtle.pencolor(&quot;gold&quot;)turtle.seth(-40)for i in range(4): turtle.circle(40,80) turtle.circle(-40,80)turtle.circle(40,80/2)turtle.fd(40)turtle.circle(16,180)turtle.fd(40 * 2/3)turtle.done() #关闭turtle，一般在使用完turtle后添加，否则会无响应 代码分析库引用与import库引用：扩充Python程序功能的方式 1.使用import保留字完成，采用如下编码风格import&lt;库名&gt;&lt;库名&gt;.&lt;函数名&gt;(&lt;函数参数&gt;) 2.使用from和import来简化代码例：import turtlefrom turtle import*/from &lt;库名&gt; import &lt;函数名&gt; (&lt;函数参数&gt;) 比较：第一种方法不会出现函数重名的现象第二种方法会出现 3.使用import和as保留字共同完成import&lt;库名&gt;as&lt;库别名&gt;&lt;库别名&gt;.&lt;函数名称&gt;(&lt;函数参数&gt;)–给调用的外部库关联一个更短、更适合自己的名字建议第三种方法 turtle绘图窗体turtle.setup(width,height,startx,starty)-setup()设置窗体的大小及位置-4个参数中后两个可选,去掉后默认在屏幕的正中心 turtle画笔控制函数turtle.penup() #别名 turtle.pu ————抬起画笔turtle.pendown() #别名 turtle.pd ————落下画笔turtle.pensize(width) #别名 turtle.width(width) ————画笔宽度turtle.pencolor(color) #————color为颜色字符串或者rgb值turtle.colormode() #————设置画笔RGB颜色的表示模式 画笔颜色有三种形式：1.颜色字符串2.rgb的小数值3.rgb的元组值附:rgb色彩体系 rgb由三种基本颜色构成万物色红黄蓝 0-255 整数或 0-1小数 turtle.colormode(mode)-1.0小数值-255整数值 运动控制函数1.空间坐标体系，坐标原点在画布的正中心turtle.goto(x,y) #————去到那个坐标2.turtle.forword(d) #别名 turtle.fd(d) ————向前前进turtle.bk(d) #————后退-d:进距离，可以为负数弧形:turtle.circle(r,extent)-r:半径-extent:绘制的弧度半径是负数:圆心在右侧 turtle方向控制函数（角度坐标体系）控制海龟面对方向：绝对角度&amp;海龟角度 turtle.setheading(angle） #别名 turtle.seth(angle) ————改变行进方向，海龟走角度turtle.left(angle) #————海龟向左转turtle.right(angle) #————海龟向右转-angle:角度只改变方向，不移动]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基本语法元素]]></title>
    <url>%2F2018%2F09%2F22%2FPython-1%2F</url>
    <content type="text"><![CDATA[之前学习Python的笔记排版过于凌乱，现在 决定重新整理一下，以便日后的复习和使用。 程序设计基本方法 计算机特性功能性 可编程性 摩尔定律集成电路单位面积晶体管数约两年增长一倍 预测很准确 编译和解释源代码-&gt;目标代码 编译：将原代码一次性转化为目标代码 解释：逐条,类似于实时 静态语言：编译 脚本语言：解释 程序的基本编写方法IPO 输入 处理 输出 输入是程序的开始 输出是程序的结束 处理方法——算法 编程解决问题的步骤分析问题 划分边界 设计算法 编写程序 测试程序 维护程序 计算机编程基础 套路 练习 实例1：温度转换 12345678910#TempConvert.pyTempStr = input(&quot;请输入带有符号的温度值：&quot;)if TempStr[-1] in [&apos;F&apos;,&apos;f&apos;]: C = (eval(TempStr[0:-1]) - 32)/1.8 print(&quot;转化后的温度是&#123;:.2f&#125;C&quot;.format(C))elif TempStr[-1] in [&apos;C&apos;,&apos;c&apos;]: F = 1.8*eval(TempStr[0:-1]) + 32 print(&quot;转化后的温度是&#123;:.2f&#125;F&quot;.format(F))else: print(&quot;输入格式错误&quot;) 这段代码很简单，但是也包含了很多Python的语法元素，下面来具体分析： 注释Python的注释有两种方法： 1.# 一个井号，一般用于单行注释 2.&apos;&apos;&apos; &apos;&apos;&apos;或者&quot;&quot;&quot; &quot;&quot;&quot; 一对单引号或双引号，一般用于多行注释 缩进缩进是Python的强制语法要求，表达语句间的关系 变量变量采用标识名来表示 变量命名字符： 大小写字母、数字、下划线和汉字及组合 注意：大小写敏感、首字符不能是数字、不能与保留字相同 其中Python的保留字如下：（33个） 数据类型字符串定义：由一对单引号或双引号标识的字符的有序序列 字符串的索引方式： 正向递增序号 0 1 2 3 4 5 反向递增序号 -6 -5 -4 -3 -2 -1 索引——返回某一个单个字符 &lt; &gt;[M] 切片——返回字符串的某一段字符 &lt; &gt;[M：N] 如温度转换实例中的TempStr[0:-1]表示的是从0开始读到最后一个字符串的字符 相当于去掉最后一个字符 数字类型整数 浮点数 列表类型列表用[]表示，采用(,)分隔各元素 [&apos;F&apos;,&apos;f&apos;]表示两个元素’F&apos;或‘f’ 使用保留字in判断一个元素是否在列表中 语句赋值语句：由赋值符号构成的一行代码 分支语句：由判断条件决定程序运行方向的语句 函数根据输入参数产生不同输出的过程 程序的输入输出input()——从控制台获得用户输入的函数 括号中是提示信息字符串 print——以字符型式像控制台输出结果的函数 print函数的格式化{}表示槽 后续变量填充到槽中 eval函数（评估函数） 去掉参数最外侧引号并执行余下语句 能将字符串语句的信息变成语句]]></content>
      <categories>
        <category>Python笔记整理</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <url>%2F2018%2F09%2F22%2F%E7%AC%AC1%E7%AF%87%E5%8D%9A%E6%96%87%2F</url>
    <content type="text"><![CDATA[1.字体字号 2.分级标题3.超链接 4.列表5.插入图片 6.表格7.分割线 8.引用9.代码 10.流程图 1.字体字号 这是斜体或这也是斜体这是粗体这是加粗斜体这是删除线 改变字体、大小、颜色 我是黑体字我是微软雅黑我是华文彩云我是红色我是绿色我是蓝色我是尺寸我是黑体，绿色，尺寸为5 为文字添加背景色 背景色yellow 2.分级标题 一级标题二级标题三级标题四级标题五级标题六级标题3.超链接 行内格式：我的博客参考格式：[我的博客][1],百度[2][1]:https://gitergreat.github.io/[2]:https://www.baidu.com/自动链接：我的博客地址https://gitergreat.github.io/ 4.列表 无序列表：写法： 无序列表1 无序列表2 无序列表3 有序列表：写法：1.有序列表12.有序列表23.有序列表3 列表嵌套：上一级和下一级之间敲三个空格即可 5.插入图片 设置图片大小、位置 6.表格 表头1 表头2 表头3 表头4 默认左对齐 左对齐 居中对齐 右对齐 默认左对齐 左对齐 居中对齐 右对齐 默认左对齐 左对齐 居中对齐 右对齐 7.分割线 8.引用 这是引用内容 这是引用内容 这是引用内容 9.代码 print(&quot;Hello world!&quot;) 12include&lt;iostream&gt;using namespace std; 10.流程图 12345678st=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;]]></content>
      <categories>
        <category>Markdown语法</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
